function vbudsiireport(dir4report, ...
                       reportname, ...
                       Tally1, ...
                       TallyP, ...
                       mcnpxPowerDensity, ...
                       vbudsiflux, ...
                       p, ...
                       g, ...
                       L, ...
                       r)


if ~isempty(dir4report) && ~strcmp(dir4report(end), filesep)
    dir4report = [dir4report filesep];
end
figdir = [dir4report 'figs/'];

if ~exist(dir4report, 'dir')
    system(['mkdir ' dir4report]);
end

if ~exist(figdir, 'dir')
    system(['mkdir ' figdir]);
end

vbudsiiPowerDensity = r.Cell(1).powerDensity;
vbudsiiflux = [r.Cell(1).spectralFlux r.Cell(2).spectralFlux];
vbudsiiFluxIntegral = ...
    sum(diff(L.groupDef').*sum([r.Cell(1).spectralFlux  ...
                r.Cell(2).spectralFlux], 2));
vbudsiiflux = vbudsiiflux/vbudsiiPowerDensity;

mcnpflux = [Tally1{1}.value{1}(1:end-1) Tally1{2}.value{1}(1:end-1)];

mcnpxFluxIntegral = sum(diff(L.groupDef').*sum(mcnpflux, 2));

%mcnpxflux = mcnpflux*max(max(vbudsiiflux))/max(max(mcnpflux));
mcnpxflux = mcnpflux/mcnpxPowerDensity;
%mcnpxflux = mcnpflux/mcnpxFluxIntegral;

vbudsiFluxIntegral = sum(diff(L.groupDef').*sum(vbudsiflux,2));

vbudsiflux(:,1) = vbudsiflux(:,1)*sum(sum(vbudsiiflux))/sum(sum(vbudsiflux));
vbudsiflux(:,2) = vbudsiflux(:,2)*sum(sum(vbudsiiflux))/sum(sum(vbudsiflux));
%vbudsiflux = vbudsiflux/vbudsiFluxIntegral;

%% PLOTS PLOTS PLOTS PLOTS
% SO-VARYING CROSS SECTIONS if doPlot
for regidx = 1:g.nRegions
    printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS)],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSII coolant',...
        'VBUDSII fuel'...
        },'', L.groupDef,{...
            vbudsiiflux(:,1),...
            vbudsiiflux(:,2),...
        }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
        });
    if ~isempty(vbudsiflux)
    printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS) 'vbudsi'],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSII coolant',...
        'VBUDSII fuel',...
        'VBUDSI coolant',...
        'VBUDSI fuel'...
        },'', L.groupDef,{...
            vbudsiiflux(:,1),...
            vbudsiiflux(:,2),...
            vbudsiflux(:,1),...
            vbudsiflux(:,2),...
        }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
        });
    printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS) 'vbudsi2'],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSI coolant',...
        'VBUDSI fuel'...
        },'', L.groupDef,{...
            vbudsiflux(:,1),...
            vbudsiflux(:,2),...
        }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
        });

    end
end

if 1 % doPDFXS

    fide = fopen([reportname 'errortable.tex'],'w');
   fprintf(fide,'\\documentclass{article}\n');
   fprintf(fide,'\\usepackage{graphicx}\n');
   fprintf(fide,'\\usepackage[left=.1in,right=.1in,top=.1in,bottom=.1in]{geometry}\n');
   fprintf(fide,'\\usepackage{pgfplots}\n');
   fprintf(fide,'\\usepackage{pgfplotstable}\n');
   fprintf(fide,'\\setlength{\\pdfpageheight}{5in}\n');
   fprintf(fide,'\\setlength{\\pdfpagewidth}{7in}\n');
%   fprintf(fide,'\\usepackage{lscape}\n');
   fprintf(fide,'\\begin{document}\n');
   fprintf(fide,'\\pgfplotstabletypeset[\n');
   fprintf(fide,'col sep=&, row sep=\\\\, \n');
   fprintf(fide,'every head row/.style={before row=\\hline, after row=\\hline\\hline},\n');
  fprintf(fide,'every last row/.style={after row=\\hline},\n');
  fprintf(fide,'every first column/.style={\n');
  fprintf(fide,'column type/.add={|}{}\n');
  fprintf(fide,'},\n');
  fprintf(fide,'every last column/.style={\n');
  fprintf(fide,'column type/.add={}{|}\n');
  fprintf(fide,'},\n');
   fprintf(fide,']\n');
   fprintf(fide,'{\n');
   fprintf(fide,'cell & ZAID & MT & XS error 1 & XS error 2 & XS error 3 & VBUDSII RR & MCNPX RR & RR error \\\\ \n');


    % CELL-LEVEL CROSS SECTIONS
    %
    cs = {1 '24.200';
          2 '14.100'};

    mts = {7 '1';
           2 '2';
           102 '102';
           9 '-6.-7'};

    for cellidx = 1:g.regionDef(1).nCells

        r.Cell(cellidx).fine(L.MT(2)).value = ...
            sum(r.Cell(cellidx).fine(L.MT(2)).value)';

        if g.regionDef(1).cellDef(cellidx).isFissionable

            VXS = cell(1,4);
            MXS = cell(1, 4);

            for j = 1:4

                VXS{j} = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;

                MXS{j} = TallyP(tallystring(cs{cellidx,2},mts{j,2}));

            end
            printxsn(figdir, [reportname 'xscell' num2str(cellidx)],...
                0,0,0,[1e-8 1e4],'', {...
                'MCNPX (n,t)',...
                'MCNPX (n,e)',...
                'MCNPX (n,$\gamma$)',...
                'MCNPX (n,$\nu$f)',...
                'VBUDSII (n,t)',...
                'VBUDSII (n,s)',...
                'VBUDSII (n,$\gamma$)',...
                'VBUDSII (n,$\nu$f)'...
                }, '', L.groupDef, VXS, L.groupDef, MXS);
        else

            VXS = cell(1,3);
            MXS = cell(1,3);

            for j = 1:3

                VXS{j} = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;
                MXS{j} = TallyP(tallystring(cs{cellidx,2},mts{j,2}));
            end
            printxsn(figdir, [reportname 'xscell' num2str(cellidx)],...
                0,0,0,[1e-8 1e4],'', {...
                'MCNPX (n,t)',...
                'MCNPX (n,e)',...
                'MCNPX (n,$\gamma$)',...
                'VBUDSII (n,t)',...
                'VBUDSII (n,s)',...
                'VBUDSII (n,$\gamma$)',...
                }, '', L.groupDef, VXS, L.groupDef, MXS);

        end

        % ZAID-LEVEL CROSS SECTIONS
        csz = {'14' 100;
              '24' 200};
        mtsz = {7 '1';
               2 '2';
               102 '102';
               18 '18'};
       %        4 '4';
        lgdzM = {...
             'MCNPX (n,t)',...
             'MCNPX (n,e)',...
             'MCNPX (n,$\gamma$)',...
             'MCNPX (n,f)'};
             %'MCNPX (n,i)',...
        lgdzV = {...
             'VBUDSII (n,t)',...
             'VBUDSII (n,e)',...
             'VBUDSII (n,$\gamma$)',...
             'VBUDSII (n,f)'};
             %'VBUDSII (n,i)',...
         for zidx = 1:length(g.regionDef(1).cellDef(cellidx).initZAIDs)
             Z = g.regionDef(1).cellDef(cellidx).initZAIDs(zidx);

             r.Cell(cellidx).fine(L.MT(2)).z(zidx).s = ...
                 sum(r.Cell(cellidx).fine(L.MT(2)).z(zidx).s)';

             VXS = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);
             RXSl = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);
             RXSh = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);
             MXS = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);

             for j = 1:3 + L.z(L.ZAID(Z)).isFissionable

     VXS{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).s;
     VRR{j} = sum(r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).s.*...
                     vbudsiiflux(:,cellidx));

                 if mtsz{j,1} == 2
     RXSl{j} = sum(r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,:,1))';
     RXSh{j} = sum(r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,:,end))';
                 else
     RXSl{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,1);
     RXSh{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,end);
                 end

                 MXS{j} = TallyP(tallystring(csz{cellidx,1},...
                     csz{cellidx,2}+zidx,...
                     mtsz{j,2}));

% TEMP CODE 120229 TO MAKE CERTAIN ELASTIC SCATTERING PLOTS
%{
if j == 2 % scattering
    fastindex = 80;
    printplotxsn(figdir,['geoffrequest120229' num2str(cellidx) ...
        'z' num2str(Z) 'm' mtsz{j,2}], ...
        0, 0, 0, [], '', { ...
        lgdzM{j}, lgdzV{j}, ...
        }, ...
        '', ...
        L.groupDef(fastindex:end), {VXS{j}(fastindex:end), ...
        MXS{j}(fastindex:end)});

end
%}

                 flux = TallyP(tallystring(csz{cellidx,1},0,0)) /  ...
                     mcnpxPowerDensity;
                 MRR{j} = nansum(MXS{j}.*flux(1:end-1));
                 %who0 = TallyP0(tallystring(csz{cellidx,1},...
                 %    csz{cellidx,2}+zidx,...
                 %    mtsz{j,2}));
                 %MRR{j} = who0(end);

                averageS0 = mean(r.Cell(cellidx).S0s(:,zidx));
                minS0 = min(r.Cell(cellidx).S0s(:,zidx));
                maxS0 = max(r.Cell(cellidx).S0s(:,zidx));
                 if  0 % ~plotS0Bounds
                     printxsn(figdir, [reportname 'xscell' num2str(cellidx) ...
                         'z' num2str(Z) 'm' mtsz{j,2}],...
                         0,0,0,[1e-8 1e4],'', {...
                         lgdzM{j}, lgdzV{j}...
                         }, ...
                         ['average relative error: ' ...
                         num2str(nanmean(abs(VXS{j}-MXS{j})./MXS{j})*100,3) '\%'...
                         '\\ S0min = ' num2str(minS0) ...
                         '\\ S0avg = ' num2str(averageS0) ...
                         '\\ S0max = ' num2str(maxS0)],...
                         L.groupDef, {VXS{j}}, L.groupDef, {MXS{j}});
                 else
                     printxsn(figdir, [reportname 'xscell' num2str(cellidx) ...
                    'z' num2str(Z) 'm' mtsz{j,2}],...
                    0,0,0,[1e-8 1e4],'', {...
                    lgdzM{j}, ...
                    lgdzV{j},...
                    'NJOY S0 = $10^{-1}$', ...
                    'NJOY S0 = $10^{10}$' ...
                    }, ...
                         ['average relative error: ' ...
                         num2str(nanmean(abs(VXS{j}-MXS{j})./MXS{j})*100,3) '\%'...
                         '\\ S0min = ' num2str(minS0) ...
                         '\\ S0avg = ' num2str(averageS0) ...
                         '\\ S0max = ' num2str(maxS0)],...
                    L.groupDef, {VXS{j};RXSl{j};RXSh{j}}, L.groupDef, {MXS{j}});
            end

                    V = VXS{j};
                    M = MXS{j};
                    idxx = find(isnan(M),1,'first');
                    fprintf(fide,'%i & %i & %i & %.3d & %.3d & %.3d & %.3d & %.3d & %.3d\\\\ \n',...
                        cellidx,...
                        Z,...
                        mtsz{j,1},...
                        nanmean(abs(V-M)./M),...
                        nansum(V(idxx:end).*M(idxx:end))/sqrt(nansum(V(idxx:end).^2))/sqrt(nansum(M(idxx:end).^2)),...
                        nansum(log10(V(idxx:end)).*log10(M(idxx:end)))/ (sqrt(nansum(log10(V(idxx:end)).^2))*sqrt(nansum(log10(M(idxx:end)).^2))),...
                        VRR{j},...
                        MRR{j},...
                        abs(VRR{j}-MRR{j})/MRR{j}...
                        );
            end
            if L.z(L.ZAID(Z)).isFissionable
                printxsn(figdir, [reportname 'xscell' num2str(cellidx) 'z' num2str(Z)],...
                    0,0,0,[1e-8 1e4],'', {...
                    'MCNPX (n,t)',...
                    'MCNPX (n,e)',...
                    'MCNPX (n,$\gamma$)',...
                    'MCNPX (n,f)',...
                    'VBUDSII (n,t)',...
                    'VBUDSII (n,e)',...
                    'VBUDSII (n,$\gamma$)',...
                    'VBUDSII (n,f)'...
                    }, '', L.groupDef, VXS, L.groupDef, MXS);
                    %'MCNPX (n,i)',...
                    %'VBUDSII (n,i)',...
            else

                printxsn(figdir, [reportname 'xscell' num2str(cellidx) 'z' num2str(Z)],...
                    0,0,0,[1e-8 1e4],'', {...
                    'MCNPX (n,t)',...
                    'MCNPX (n,e)',...
                    'MCNPX (n,$\gamma$)',...
                    'VBUDSII (n,t)',...
                    'VBUDSII (n,e)',...
                    'VBUDSII (n,$\gamma$)',...
                    }, '', L.groupDef, VXS, L.groupDef, MXS);
                    %'MCNPX (n,i)',...
                    %'VBUDSII (n,i)',...

            end


        end
    end

    % ERROR TABLE
    fprintf(fide,'}\n');
    fprintf(fide,'\\end{document}\n');
    fclose(fide);

    system(sprintf('rubber --into=%s --pdf %serrortable.tex',dir4report, reportname));

    % ASSEMBLE PDF DOCUMENT
   fid = fopen([reportname '.tex'],'w');
   fprintf(fid,'\\documentclass[letterpaper,12pt]{article}\n');
   fprintf(fid,'\\usepackage{graphicx}\n');
   fprintf(fid,'\\usepackage[left=.5in,right=.5in,top=1in,bottom=1in]{geometry}\n');
   fprintf(fid,'\\usepackage{caption}\n');
   fprintf(fid,'\\newcommand{\\fitzefigtwo}[2]{\\begin{center}\\includegraphics{#1}\\captionof{figure}{#2}\\label{fig:#2}\\end{center}}\n');
   fprintf(fid,'\\begin{document}\n');
   fprintf(fid,'\\title{Results}\n');
   fprintf(fid,'\\date{\\today}\n');
   fprintf(fid,'\\maketitle\n');


   fprintf(fid,'\\section{The only Flux plot(s)}\n');
   fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) '}{Energy dependent flux in both cells of the reactor, generated by MCNPX and VBUDSII.}\n']);

   if ~isempty(vbudsiflux) % plotVBUDSIflux
   fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) 'vbudsi}{Energy dependent flux in both cells of the reactor, generated by MCNPX, VBUDSII and VBUDSI.}\n']);
   fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) 'vbudsi2}{Energy dependent flux in both cells of the reactor, generated by MCNPX and VBUDSI.}\n']);
   end

    for cellidx = 1:g.regionDef(1).nCells

        fprintf(fid,'\\subsection{Cross sections in cell %s}\n',g.regionDef(1).cellDef(cellidx).name);

        fprintf(fid,['\\fitzefigtwo{figs/' reportname 'xscell' num2str(cellidx) '}{Energy-dependent cross sections for the %s cell, generated by VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name);

        % ZAID-LEVEL CROSS SECTIONS
        mtsz = {7 '1';
    %           4 '4';
               2 '2';
               102 '102';
               18 '18'};
        for zidx = 1:length(g.regionDef(1).cellDef(cellidx).initZAIDs)
            Z = g.regionDef(1).cellDef(cellidx).initZAIDs(zidx);

            fprintf(fid,'\\subsubsection{Cross sections in cell %s, for ZAID %i}\n',g.regionDef(1).cellDef(cellidx).name, Z);

            fprintf(fid,['\\fitzefigtwo{figs/' reportname 'xscell' ...
                num2str(cellidx) 'z' num2str(Z) '}{Energy-dependent cross sections in the %s cell for ZAID %i, generated by both MCNPX and VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name,Z);

            fprintf(fid,'\\subsubsection{Cross sections in cell %s, for ZAID %i, separated by reaction type}\n',g.regionDef(1).cellDef(cellidx).name, Z);

            if L.z(L.ZAID(Z)).isFissionable
                for j = 1:4
                    fprintf(fid,['\\fitzefigtwo{figs/' reportname 'xscell' ...
                        num2str(cellidx) 'z' num2str(Z) 'm' mtsz{j,2} '}{Energy-dependent cross sections in the %s cell for ZAID %i and MT %i, generated by both MCNPX and VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name,Z,mtsz{j,1});
                end
            else
                for j = 1:3
                    fprintf(fid,['\\fitzefigtwo{figs/' reportname 'xscell' ...
                        num2str(cellidx) 'z' num2str(Z) 'm' mtsz{j,2} '}{Energy-dependent cross sections in the %s cell for ZAID %i and MT %i, generated by both MCNPX and VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name,Z,mtsz{j,1});
                end
            end

        end
    end
    fprintf(fid,['\n\nMT 7: total \n\n'...
                 'MT 4: inelastic scattering \n\n'...
                 'MT 2: elastic scattering \n\n'...
                 'MT 102: radiative capture \n\n'...
                 'MT 18: fission\n\n'...
                 'XS error 1: \\verb|nanmean(abs(V-M)./M)|\n\n'...
                 'XS error 2: \\verb|V''*M/norm(V)/norm(M)|\n\n'...
                 'XS error 3: \\verb|log10(V)''*log10(M)/norm(log10(V))/norm(log10(M))|\n\n']);
    fprintf(fid,['\\includegraphics{' reportname 'errortable.pdf}\n']);
    fprintf(fid,'\\end{document}\n');
    fclose(fid);
    system(sprintf('rubber --into=%s --pdf %s.tex',dir4report, reportname));
    

end




