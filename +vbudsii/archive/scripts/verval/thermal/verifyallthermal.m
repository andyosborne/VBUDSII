clear all;

runMCNPX = 0;
doPlot = 1;


mycd = cd;
cd(fullfile('..','..','..',''));
vbudsiiDir = cd;
cd(mycd); % alternatively, mfilename

pL = struct('metamat','FarmXSMeta',...
                'address','/home/fitze/Dropbox/UTA/r/code/vbudsii/data/XSFarm',...
               'verbose',1,...
               'explore',0,...
                  'mine',0,...
                 'plant',1,...
             'fertilize',1,...
               'harvest',1,...
                     'e',struct('searchWeb',0),...
                     'm',struct('downloadTape20s',0),...
                     'p',struct('MFMTs',[3 1;
                                         3 4;
                                         6 2;
                                         3 18;
                                         3 102;
                                         3 251;
                                         3 452],...
                                 'Ts',[300 600 900 1200 1500],...
                                'S0s',10.^([10 5 3 2 1 0 -1]),...
                             'IGNstr','1',...
                           'groupDef',10.^(-4:.1:7),...
                             'IWTstr','3'),...
                     'f',struct('overwriteOutput',1,...
                                     'logResults',0),...
                     'h',struct('makeLibrary',1,...
                                 'makeArrays',0),...
                 'ZAIDs',[1001 8016 11023 92235 92238]);

%% DEFINE PARAMETER STRUCTURE
fineGroupDef = 10.^(-4:.1:7);
fewGroupDef = [1e-4 1 100e3 1e7];
p = struct('nFineGroups',length(fineGroupDef)-1,... % leave blank.
           'nFewGroups',length(fewGroupDef)-1,...
           'fineGroupDef',fineGroupDef,...
           'fewGroupDef',fewGroupDef,...
           'powerDensity',50,... % MW/m^3
           'nTimeSteps',1,...
           'vbudsiiDir',vbudsiiDir,...
           'makeLibrary',1,...
           'makeLibraryTempFlag',pL,...
           'XSLibraryMAT',fullfile('..','..','data','XSLibrary.mat'),...
           'verbose',1,...
           'resolveXS',1,...
           'immutableMyMTs',1,...
           'makeRealNuFission',1,...
           'S0iterthresh',.00001,...
           'doPlot',0); % this largely affects the validation effort.

% Determining pin diameter.
uc.pinPitch = 1.26; % % cm

uc.pinDiam = .7844; %sqrt(uc.pinPitch^2 * fuelVolFraction * 4 / pi);
% pellet diameter

uc.f = 1; % some weighting of the fuel regions
uc.g = 1; % some weighting of the moderator regions
uc.sauerConst.mod = 2.35;
uc.sauerConst.fuel = 5.00;

p.uc = uc;

%% DEFINE GEOMETRY STRUCTURE
% initialize
g = struct('nRegions',          [],...
           'regionDef',         struct('name','',...
                                       'nCells',    [],...
                                       'relVolumes',[],...
                                       'isFissionable',[],...
                                       'cellDef',struct('name','',...
                                                'isFissionable',[],...
                                                'initZAIDs',[],...
                                                'initNumDensities',[],...
                                                'initDensity',[],...
                                                'initSpectralFlux',[],...
                                                'initTemp',[]...
                                                        )));
enrichment = .026;
density_H2O = .72; % g/cm^3
density_UO2 = 11; %g/cm^3
[ao, wo, N_H2O] = matl([1001 2;
                       8016 1], 1, density_H2O);
[ao, wo, N_UO2] = matl([92235 enrichment;
                        92238 1-enrichment;
                        8016 2], 1, density_UO2);

% define
% one region with two cells: UO2 and H2O
g.nRegions = 1;
g.regionDef(1).name = 'campaign1';
g.regionDef(1).nCells = 2;
g.regionDef(1).relVolumes = [uc.pinPitch^2-pi/4*uc.pinDiam^2, pi/4*uc.pinDiam^2];
% H2O cell
g.regionDef(1).cellDef(1).name = 'H2O';
g.regionDef(1).cellDef(1).initZAIDs = [222];
g.regionDef(1).cellDef(1).initZAIDs = [1001 8016];
g.regionDef(1).cellDef(1).initNumDensities = [N_H2O(2)];
g.regionDef(1).cellDef(1).initNumDensities = [N_H2O];
g.regionDef(1).cellDef(1).initDensity = density_H2O;
g.regionDef(1).cellDef(1).initSpectralFlux = ones(1,p.nFineGroups);
g.regionDef(1).cellDef(1).initTemp = 300 + 273;
% UO2 cell
g.regionDef(1).cellDef(2).name = 'UO2';
g.regionDef(1).cellDef(2).initZAIDs = [92235 92238 8016];
g.regionDef(1).cellDef(2).initNumDensities = N_UO2';
g.regionDef(1).cellDef(2).initDensity = density_UO2;
g.regionDef(1).cellDef(2).initSpectralFlux = ones(1,p.nFineGroups);
g.regionDef(1).cellDef(2).initTemp = 900 + 273;

%% RUN MCNPX
addpath(cd(fullfile('..','mcnpx')));

ifname = 'verifymcnpxthermal2';
mcnpxexecpath = fullfile('..','mcnpx','thermal2');

if runMCNPX
    % ~exist([mcnpxexecpath filesep 'outp'], 'file')
    writeMCNPXSpectralInput(p, g, mcnpxexecpath, ifname);
    cd(mcnpxexecpath);
    system(['mcnpx i= ' ifname]);
    system('rm runtpe');
end

cd(mycd);
[Tally1t TallyPt] = TallyPull2([mcnpxexecpath filesep 'outp']);
save XSTallythermal Tally1t TallyPt

%% RUN VBUDSII
%cd(fullfile('..','..',''));
%addpath(fullfile('..','..',''));
addpath(p.vbudsiiDir);
Tally1 = Tally1t;
tallyxs = Tally1t;
%p.useMCNPXTallyXS = tallyxs;


[Results, p , g, L] = main(p,g);

r = Results.Region(1);

%load verifyvbudsifast_111128.mat;
%vbudsflux = VBUDS_flux(end:-2:2,[1 2]);
%vbudsflux = vbudsflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(vbudsflux));
%
mcnpflux = [Tally1{2}.value{1}(1:end-1) Tally1{1}.value{1}(1:end-1)];
mcnpxflux = mcnpflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(mcnpflux));

mcnpxPower = Tally1{1}.value{1}(end);

if doPlot
figdir = '/home/fitze/Dropbox/UTA/c/deinert/proj/doc/figs/';
    for regidx = 1:g.nRegions
        for cellidx = 1:g.regionDef(regidx).nCells
        plotxsn(0,2,...
        [g.regionDef(regidx).name ': '...
        g.regionDef(regidx).cellDef(cellidx).name],...
        {['vbudsii. k_{\infty} = ' num2str(r.kInf)],...
          'mcnpx. k_{eff} = 1.56'},...
        '',...
            p.fineGroupDef,...
            Results.Region(regidx).Cell(cellidx).spectralFlux,...
            mcnpxflux(:,cellidx));
        end
%        printxsn([figdir 'xsplot/'],...
%             ['verifyallthermal2flux'],0,0,2,[],'',...
%             {'MCNPX coolant','MCNPX fuel','VBUDSII coolant','VBUDSII fuel'},'',...
%             L.groupDef,{Results.Region(regidx).Cell(1).spectralFlux,Results.Region(regidx).Cell(2).spectralFlux},L.groupDef,{mcnpxflux(:,1),mcnpxflux(:,2)});
    end
end

return;
if doPlot

    mts = {7 1;
           2 2;
           102 4;
           9 5};
%    fprintf(fid,'FM34 -1 100 (1) (2) (18) (102) (-6 -7)\n');
    for cellidx = 1:g.regionDef(1).nCells
        r.Cell(cellidx).fine(L.MT(2)).value = ...
        sum(r.Cell(cellidx).fine(L.MT(2)).value)';
        hf = figure;
        for j = 1:4
            ha = subplot(2,2,j);
            if (j == 4) && ~g.regionDef(1).cellDef(cellidx).isFissionable
            else
                A = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;
                B = tallyxs{5-cellidx}.value{mts{j,2}}(1:end-1)./...
                    tallyxs{3-cellidx}.value{1}(1:end-1);
            plotxsn2(hf,ha,0,1,['Cell ' g.regionDef(1).cellDef(cellidx).name ...
            ' MT ' num2str(mts{j,1})],{'vbudsii','mcnpx'},...
            num2str(sum(abs(A-B)./B)),...
            p.fineGroupDef,...
            A,...
            B);
            end
        end
    end
end

%{
vbudsiiPower = sum(200* r.Cell(2).fine(L.MT(18)).value .* ...
r.Cell(2).spectralFlux)

%% CHECK RESULTS
doPlot = 0;

Tally1 = TallyPull2('mcnpx/2/outp');
mcnpflux = [Tally1{2}.value{1}(1:end-1) Tally1{1}.value{1}(1:end-1)];
mcnpxflux = mcnpflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(mcnpflux));

mcnpxPower = Tally1{3}.value{1}(end)

load benchmarkvbuds1.mat
vbudsflux = VBUDS_flux(end:-2:2,[1 2]);
vbudsflux = vbudsflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(vbudsflux));


for regidx = 1:g.nRegions
    for cellidx = 1:g.regionDef(regidx).nCells
    plotxsn(0,2,...
    [g.regionDef(regidx).name ': '...
    g.regionDef(regidx).cellDef(cellidx).name],...
    {['vbudsii. k_{\infty} = ' num2str(r.kInf)],...
     ['vbudsi, k_{\infty} = '  num2str(six_factors(7))],...
        'mcnp5. k_{eff} = 1.44','mcnpx. k_{eff} = 1.44'},...
    '',...
        p.fineGroupDef,...
        Results.Region(regidx).Cell(cellidx).spectralFlux,...
        vbudsflux(:,cellidx),...
        mcnp5flux(:,cellidx),...
        mcnpxflux(:,cellidx));
    end
end

%{
if sum(r.Cell(1).spectralFlux ~= mcnpflux(:,1)) || ...
    sum(r.Cell(2).spectralFlux ~= mcnpflux(:,2))
    disp('benchmarkmcnpx flux test FAILED');
    figure;
    subplot(1,2,1);
    loglog(p.fineGroupDef(1:end-1)'*[1 1],[r.Cell(1).spectralFlux ...
        mcnpflux(:,1)])
    title('H2O')
    ylabel('\phi (# n cm^{-2} s^{-1})')
    xlabel('E (eV)')
    legend('vbudsii','mcnpx','Location','Best')
    subplot(1,2,2);
    loglog(p.fineGroupDef(1:end-1)'*[1 1],[r.Cell(2).spectralFlux ...
        mcnpflux(:,2)])
    title('UO2')
    ylabel('\phi (# n cm^{-2} s^{-1})')
    xlabel('E (eV)')
    legend('vbudsii','mcnpx','Location','Best')
%   [r.Cell(2).spectralFlux./mcnpflux(:,2) r.Cell(2).spectralFlux-mcnpflux(:,2)]
    %print('benchmarkmcnp5_111026.eps','-depsc','-r300');
else
    disp('benchmarkmcnpx flux test passed');
%    [Region(1).Cell(1).spectralFlux == phi(:,1), ...
%    Region(1).Cell(2).spectralFlux == phi(:,2)]
end
%}
%{
plotxsn(1,2,g.regionDef(1).name,...
    {'vbudsi H2O','vbudsi UO2','vbudsii H2O','vbudsii UO2'},'',...
    p.fineGroupDef,...
    vbudsflux(:,2),...
    r.Cell(1).spectralFlux,...
    vbudsflux(:,1),...
    r.Cell(2).spectralFlux);


plotxsn(1,2,g.regionDef(1).name,...
    {'vbudsi H2O','vbudsi UO2','vbudsii H2O','vbudsii UO2'},'',...
    p.fineGroupDef,...
    VBUDS_flux3(:,2),...
    r.Cell(1).spectralFlux,...
    VBUDS_flux3(:,1),...
    r.Cell(2).spectralFlux);
%}
%}
