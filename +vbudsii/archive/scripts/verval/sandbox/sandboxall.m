clear all;
runMCNPX = 0;
doPDFXS = 1;
plotS0Bounds = 1;
plotVBUDSIflux = 1;


mycd = cd;
cd(fullfile('..','..','..',''));
vbudsiiDir = cd;
cd(mycd); % alternatively, mfilename

%sandboxthermal
sandboxthermalbound
%sandboxfast
%sandboxfastnative6

%{
%% PL PL PL PL PL PL PL PL
pL = struct('metamat','FarmXSMeta',...
            'address','/home/fitze/Dropbox/UTA/r/code/vbudsii/data/XSFarm',...
            'verbose',1,...
            'explore',0,...
               'mine',0,...
              'plant',0,...
          'fertilize',0,...
            'harvest',1,...
                 'e',struct('searchWeb',1),...
                 'm',struct('downloadTape20s',1),...
                 'p',struct('MFMTs',[3 1;
                                     3 4;
                                     6 2;
                                     3 18;
                                     3 102;
                                     3 251;
                                     3 452],...
                               'Ts',[300 600 900 1200 1500],...
                              'S0s',10.^([10 5 3 2 1 0 -1]),...
                           'IGNstr','1',...
                         'groupDef',10.^(-4:.1:7),...
                           'IWTstr','3'),...
                 'f',struct('overwriteOutput',1,...
                                 'logResults',0),...
                 'h',struct('makeLibrary',1,...
                             'makeArrays',0),...
             'ZAIDs',[1001 8016 11023 92235 92238]);


%% DEFINE PARAMETER STRUCTURE P P P P P P P
fineGroupDef = 10.^(-4:.1:7);
fewGroupDef = [1e-4 1 100e3 1e7];
p = struct('nFineGroups',length(fineGroupDef)-1,... % leave blank.
    'nFewGroups',length(fewGroupDef)-1,...
    'fineGroupDef',fineGroupDef,...
    'fewGroupDef',fewGroupDef,...
    'powerDensity',50,... % MW/m^3
    'nTimeSteps',1,...
    'vbudsiiDir',vbudsiiDir,...
    'makeLibrary',1,...
    'makeLibraryTempFlag',pL,... %3,...
    'XSLibraryMAT',fullfile('..','..','data','XSLibrary.mat'),...
    'verbose',1,...
    'resolveXS',1,...
    'immutableMyMTs',1,...
    'makeRealNuFission',1,...
    'S0iterthresh',.00001,...
    'doPlot',0); % this largely affects the validation effort.

% Determining pin diameter.
uc.pinPitch = 2; % [2,2];

fuelVolFraction = 0.37;
uc.pinDiam = sqrt(uc.pinPitch^2 * fuelVolFraction * 4 / pi);

uc.f = 1; % some weighting of the fuel regions
uc.g = 1; % some weighting of the moderator regions
uc.sauerConst.mod = 2.35;
uc.sauerConst.fuel = 5.00;

p.uc = uc;

%% DEFINE GEOMETRY STRUCTURE
% initialize
g = struct('nRegions',          [],...
    'regionDef',         struct('name','',...
    'nCells',    [],...
    'relVolumes',[],...
    'isFissionable',[],...
    'cellDef',struct('name','',...
    'isFissionable',[],...
    'initZAIDs',[],...
    'initNumDensities',[],...
    'initDensity',[],...
    'initSpectralFlux',[],...
    'initTemp',[]...
    )));
%% G G G G G G G G G G G G
enrichment = .256;
density_Na = 0.882; % g/cm^3
density_UO2 = 11; %g/cm^3
[ao, wo, N_Na] = matl([11023 1], 1, density_Na);
[ao, wo, N_UO2] = matl([92235 enrichment;
    92238 1-enrichment;
    8016 2], 1, density_UO2);

% define
% one region with two cells: UO2 and H2O
g.nRegions = 1;
g.regionDef(1).name = 'campaign1';
g.regionDef(1).nCells = 2;
g.regionDef(1).relVolumes = [uc.pinPitch^2-pi/4*uc.pinDiam^2, pi/4*uc.pinDiam^2];
% H2O cell
g.regionDef(1).cellDef(1).name = 'Na';
g.regionDef(1).cellDef(1).initZAIDs = [11023];
g.regionDef(1).cellDef(1).initNumDensities = [N_Na];
g.regionDef(1).cellDef(1).initDensity = density_Na;
g.regionDef(1).cellDef(1).initSpectralFlux = ones(1,p.nFineGroups);
g.regionDef(1).cellDef(1).initTemp = 300 + 273;
% UO2 cell
g.regionDef(1).cellDef(2).name = 'UO2';
g.regionDef(1).cellDef(2).initZAIDs = [92235 92238 8016];
g.regionDef(1).cellDef(2).initNumDensities = N_UO2';
g.regionDef(1).cellDef(2).initDensity = density_UO2;
g.regionDef(1).cellDef(2).initSpectralFlux = ones(1,p.nFineGroups);
g.regionDef(1).cellDef(2).initTemp = 900 + 273;
%}

%% RUN MCNPX
addpath(cd(fullfile('..','mcnpx')));

ifname = 'sandbox';
mcnpxexecpath = fullfile('..','mcnpx','sandbox');

if runMCNPX
    % ~exist([mcnpxexecpath filesep 'outp'], 'file')
    writeMCNPXSpectralInput(p, g, mcnpxexecpath, ifname);
    cd(mcnpxexecpath);
    system(['mcnpx i= ' ifname]);
    if ispc
        system('del runtpe');
    else
        system('rm runtpe');
    end
end

cd(mycd);
[Tally1 TallyP] = TallyPull2([mcnpxexecpath filesep 'outp']);
save XSTallysandbox Tally1 TallyP

%% RUN VBUDSII
%cd(fullfile('..','..',''));
%addpath(fullfile('..','..',''));
addpath(p.vbudsiiDir);

tallyxs = Tally1;
%p.useMCNPXTallyXS = tallyxs;

% BOTCHED!!!
%if g.regionDef(1).cellDef(1).initZAIDs == [1001 8016];
%    g.regionDef(1).cellDef(1).initZAIDs = [222];
%    g.regionDef(1).cellDef(1).initNumDensities =...
%    g.regionDef(1).cellDef(1).initNumDensities(2);
%end
[Results, p , g, L] = main(p,g);

r = Results.Region(1);

%disp('RETURN AT THIS LINE');
%return;
cd(mycd);

%% SCALE FLUX
vbudsiiPowerDensity = r.Cell(2).powerDensity;
vbudsiiflux = [Results.Region(1).Cell(1).spectralFlux  ...
                Results.Region(1).Cell(2).spectralFlux];
vbudsiiFluxIntegral = ...
    sum(diff(L.groupDef').*sum([Results.Region(1).Cell(1).spectralFlux  ...
                Results.Region(1).Cell(2).spectralFlux], 2));
vbudsiiflux = vbudsiiflux/vbudsiiPowerDensity;

mcnpflux = [Tally1{2}.value{1}(1:end-1) Tally1{1}.value{1}(1:end-1)];
mcnpxflux = mcnpflux*max(max(vbudsiiflux))/max(max(mcnpflux));

mcnpxPower = TallyP('14.100.-6.-8');
mcnpxPowerDensity = mcnpxPower(end);
mcnpxFluxIntegral = sum(diff(L.groupDef').*sum(mcnpflux, 2));

mcnpxflux = mcnpflux/mcnpxPowerDensity;
%mcnpxflux = mcnpflux/mcnpxFluxIntegral;

%load verifyvbudsifast_111128.mat;
%vbudsflux = VBUDS_flux(end:-2:2,[1 2]);
%vbudsflux = vbudsflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(vbudsflux));

vbudsiFluxIntegral = sum(diff(L.groupDef').*sum(vbudsiflux,2));

vbudsiflux(:,1) = vbudsiflux(:,1)*sum(sum(vbudsiiflux))/sum(sum(vbudsiflux));
vbudsiflux(:,2) = vbudsiflux(:,2)*sum(sum(vbudsiiflux))/sum(sum(vbudsiflux));
%vbudsiflux = vbudsiflux/vbudsiFluxIntegral;
%

%% PLOTS PLOTS PLOTS PLOTS
% SO-VARYING CROSS SECTIONS if doPlot
figdir = '/home/fitze/Dropbox/UTA/c/deinert/proj/doc/figs/';
for regidx = 1:g.nRegions
    for cellidx = 1:g.regionDef(regidx).nCells
        %Results.Region(regidx).Cell(cellidx).spectralFlux =...
        %    Results.Region(regidx).Cell(cellidx).spectralFlux/vbudsiiPowerDensity;
        %r.Cell(cellidx).spectralFlux =...
        %    r.Cell(cellidx).spectralFlux/vbudsiiPowerDensity;
        %Results.Region(regidx).Cell(cellidx).spectralFlux =...
        %    Results.Region(regidx).Cell(cellidx).spectralFlux/vbudsiiFluxIntegral;
        %r.Cell(cellidx).spectralFlux =...
        %    r.Cell(cellidx).spectralFlux/vbudsiiFluxIntegral;

        %plotxsn(0,2,...
        %    [g.regionDef(regidx).name ': '...
        %    g.regionDef(regidx).cellDef(cellidx).name],...
        %    {['vbudsii. k_{\infty} = ' num2str(r.kInf)],...
        %    'mcnpx. k_{eff} = 1.56'},...
        %    '',...
        %    p.fineGroupDef,...
        %    Results.Region(regidx).Cell(cellidx).spectralFlux,...
        %    mcnpxflux(:,cellidx));
    end
    printplotxsn('parts',['sandboxflux' num2str(p.resolveXS)],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSII coolant',...
        'VBUDSII fuel'...
        },'', L.groupDef,{...
            vbudsiiflux(:,1),...
            vbudsiiflux(:,2),...
        }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
        });
    if plotVBUDSIflux
    printplotxsn('parts',['sandboxflux' num2str(p.resolveXS) 'vbudsi'],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSII coolant',...
        'VBUDSII fuel',...
        'VBUDSI coolant',...
        'VBUDSI fuel'...
        },'', L.groupDef,{...
            vbudsiiflux(:,1),...
            vbudsiiflux(:,2),...
            vbudsiflux(:,1),...
            vbudsiflux(:,2),...
        }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
        });
    printplotxsn('parts',['sandboxflux' num2str(p.resolveXS) 'vbudsi2'],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSI coolant',...
        'VBUDSI fuel'...
        },'', L.groupDef,{...
            vbudsiflux(:,1),...
            vbudsiflux(:,2),...
        }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
        });

    end
end

% INFINITE DILUTION CROSS SECTIONS
if 0
    p.resolveXS = ~p.resolveXS;
    [Resultsz, pz , gz, Lz] = main(p, g);
    r = Resultsz.Region(1);
    mcnpxflux = mcnpflux*max(max([r.Cell(1).spectralFlux
        r.Cell(2).spectralFlux]))/max(max(mcnpflux));
    for regidx = 1:g.nRegions
        printxsn('parts',['sandboxflux' num2str(p.resolveXS)],0,0,2,[1e-6 1e1],'',...
            {'MCNPX coolant',...
            'MCNPX fuel',...
            'VBUDSII coolant',...
            'VBUDSII fuel',...
            'VBUDSII coolant, i.d.',...
            'VBUDSII fuel, i.d.'},'',...
            L.groupDef,{...
            Results.Region(regidx).Cell(1).spectralFlux,...
            Results.Region(regidx).Cell(2).spectralFlux,...
            Resultsz.Region(regidx).Cell(1).spectralFlux,...
            Resultsz.Region(regidx).Cell(2).spectralFlux,...
            },L.groupDef,{mcnpxflux(:,1),mcnpxflux(:,2)});
    end
end

if doPDFXS

    fide = fopen('sandboxerrortable.tex','w');
   fprintf(fide,'\\documentclass{article}\n');
   fprintf(fide,'\\usepackage{graphicx}\n');
   fprintf(fide,'\\usepackage[left=.1in,right=.1in,top=.1in,bottom=.1in]{geometry}\n');
   fprintf(fide,'\\usepackage{pgfplots}\n');
   fprintf(fide,'\\usepackage{pgfplotstable}\n');
   fprintf(fide,'\\setlength{\\pdfpageheight}{5in}\n');
   fprintf(fide,'\\setlength{\\pdfpagewidth}{7in}\n');
%   fprintf(fide,'\\usepackage{lscape}\n');
   fprintf(fide,'\\begin{document}\n');
   fprintf(fide,'\\pgfplotstabletypeset[\n');
   fprintf(fide,'col sep=&, row sep=\\\\, \n');
   fprintf(fide,'every head row/.style={before row=\\hline, after row=\\hline\\hline},\n');
  fprintf(fide,'every last row/.style={after row=\\hline},\n');
  fprintf(fide,'every first column/.style={\n');
  fprintf(fide,'column type/.add={|}{}\n');
  fprintf(fide,'},\n');
  fprintf(fide,'every last column/.style={\n');
  fprintf(fide,'column type/.add={}{|}\n');
  fprintf(fide,'},\n');
   fprintf(fide,']\n');
   fprintf(fide,'{\n');
   fprintf(fide,'cell & ZAID & MT & XS error 1 & XS error 2 & XS error 3 & VBUDSII RR & MCNPX RR & RR error \\\\ \n');


   TallyP0 = TallyP;
    MKEYS = keys(TallyP);
    for i = 1:length(MKEYS)
        if strcmp(MKEYS{i}(1:2), '14') && ~strcmp(MKEYS{i}, '14.0.0')
            TallyP(MKEYS{i}) = TallyP(MKEYS{i})./TallyP('14.0.0');
            aaa = TallyP(MKEYS{i});
            TallyP(MKEYS{i}) = aaa(1:end-1);
        elseif strcmp(MKEYS{i}(1:2), '24') && ~strcmp(MKEYS{i}, '24.0.0')
            TallyP(MKEYS{i}) = TallyP(MKEYS{i})./TallyP('24.0.0');
            aaa = TallyP(MKEYS{i});
            TallyP(MKEYS{i}) = aaa(1:end-1);
        end
    end

    % CELL-LEVEL CROSS SECTIONS
    %
    cs = {1 '24.200';
          2 '14.100'};

    mts = {7 '1';
           2 '2';
           102 '102';
           9 '-6.-7'};

    for cellidx = 1:g.regionDef(1).nCells

        r.Cell(cellidx).fine(L.MT(2)).value = ...
            sum(r.Cell(cellidx).fine(L.MT(2)).value)';


        if g.regionDef(1).cellDef(cellidx).isFissionable

            VXS = cell(1,4);
            MXS = cell(1, 4);

            for j = 1:4

                VXS{j} = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;

                MXS{j} = TallyP(tallystring(cs{cellidx,2},mts{j,2}));

            end
            printxsn('parts', ['sandboxxscell' num2str(cellidx)],...
                0,0,0,[1e-8 1e4],'', {...
                'MCNPX (n,t)',...
                'MCNPX (n,e)',...
                'MCNPX (n,$\gamma$)',...
                'MCNPX (n,$\nu$f)',...
                'VBUDSII (n,t)',...
                'VBUDSII (n,s)',...
                'VBUDSII (n,$\gamma$)',...
                'VBUDSII (n,$\nu$f)'...
                }, '', L.groupDef, VXS, L.groupDef, MXS);
        else

            VXS = cell(1,3);
            MXS = cell(1,3);

            for j = 1:3

                VXS{j} = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;
                MXS{j} = TallyP(tallystring(cs{cellidx,2},mts{j,2}));
            end
            printxsn('parts', ['sandboxxscell' num2str(cellidx)],...
                0,0,0,[1e-8 1e4],'', {...
                'MCNPX (n,t)',...
                'MCNPX (n,e)',...
                'MCNPX (n,$\gamma$)',...
                'VBUDSII (n,t)',...
                'VBUDSII (n,s)',...
                'VBUDSII (n,$\gamma$)',...
                }, '', L.groupDef, VXS, L.groupDef, MXS);

        end

        % ZAID-LEVEL CROSS SECTIONS
        csz = {'24' 200;
              '14' 100};
        mtsz = {7 '1';
               2 '2';
               102 '102';
               18 '18'};
       %        4 '4';
        lgdzM = {...
             'MCNPX (n,t)',...
             'MCNPX (n,e)',...
             'MCNPX (n,$\gamma$)',...
             'MCNPX (n,f)'};
             %'MCNPX (n,i)',...
        lgdzV = {...
             'VBUDSII (n,t)',...
             'VBUDSII (n,e)',...
             'VBUDSII (n,$\gamma$)',...
             'VBUDSII (n,f)'};
             %'VBUDSII (n,i)',...
         for zidx = 1:length(g.regionDef(1).cellDef(cellidx).initZAIDs)
             Z = g.regionDef(1).cellDef(cellidx).initZAIDs(zidx);

             r.Cell(cellidx).fine(L.MT(2)).z(zidx).s = ...
                 sum(r.Cell(cellidx).fine(L.MT(2)).z(zidx).s)';

             VXS = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);
             RXSl = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);
             RXSh = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);
             MXS = cell(1, 3 + L.z(L.ZAID(Z)).isFissionable);

             for j = 1:3 + L.z(L.ZAID(Z)).isFissionable

     VXS{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).s;
     VRR{j} = sum(r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).s.*...
                     vbudsiiflux(:,cellidx));

                 if mtsz{j,1} == 2
     RXSl{j} = sum(r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,:,1))';
     RXSh{j} = sum(r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,:,end))';
                 else
     RXSl{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,1);
     RXSh{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).t(:,end);
                 end

                 MXS{j} = TallyP(tallystring(csz{cellidx,1},...
                     csz{cellidx,2}+zidx,...
                     mtsz{j,2}));

% TEMP CODE 120229 TO MAKE CERTAIN ELASTIC SCATTERING PLOTS
%{
if j == 2 % scattering
    fastindex = 80;
    printplotxsn('parts',['geoffrequest120229' num2str(cellidx) ...
        'z' num2str(Z) 'm' mtsz{j,2}], ...
        0, 0, 0, [], '', { ...
        lgdzM{j}, lgdzV{j}, ...
        }, ...
        '', ...
        L.groupDef(fastindex:end), {VXS{j}(fastindex:end), ...
        MXS{j}(fastindex:end)});

end
%}

                 flux = TallyP(tallystring(csz{cellidx,1},0,0)) /  ...
                     mcnpxPowerDensity;
                 MRR{j} = nansum(MXS{j}.*flux(1:end-1));
                 %who0 = TallyP0(tallystring(csz{cellidx,1},...
                 %    csz{cellidx,2}+zidx,...
                 %    mtsz{j,2}));
                 %MRR{j} = who0(end);

                averageS0 = mean(r.Cell(cellidx).S0s(:,zidx));
                minS0 = min(r.Cell(cellidx).S0s(:,zidx));
                maxS0 = max(r.Cell(cellidx).S0s(:,zidx));
                 if ~plotS0Bounds
                     printxsn('parts', ['sandboxxscell' num2str(cellidx) ...
                         'z' num2str(Z) 'm' mtsz{j,2}],...
                         0,0,0,[1e-8 1e4],'', {...
                         lgdzM{j}, lgdzV{j}...
                         }, ...
                         ['average relative error: ' ...
                         num2str(nanmean(abs(VXS{j}-MXS{j})./MXS{j})*100,3) '\%'...
                         '\\ S0min = ' num2str(minS0) ...
                         '\\ S0avg = ' num2str(averageS0) ...
                         '\\ S0max = ' num2str(maxS0)],...
                         L.groupDef, {VXS{j}}, L.groupDef, {MXS{j}});
                 else
                     printxsn('parts', ['sandboxxscell' num2str(cellidx) ...
                    'z' num2str(Z) 'm' mtsz{j,2}],...
                    0,0,0,[1e-8 1e4],'', {...
                    lgdzM{j}, ...
                    lgdzV{j},...
                    'NJOY S0 = $10^{-1}$', ...
                    'NJOY S0 = $10^{10}$' ...
                    }, ...
                         ['average relative error: ' ...
                         num2str(nanmean(abs(VXS{j}-MXS{j})./MXS{j})*100,3) '\%'...
                         '\\ S0min = ' num2str(minS0) ...
                         '\\ S0avg = ' num2str(averageS0) ...
                         '\\ S0max = ' num2str(maxS0)],...
                    L.groupDef, {VXS{j};RXSl{j};RXSh{j}}, L.groupDef, {MXS{j}});
            end

                    V = VXS{j};
                    M = MXS{j};
                    idxx = find(isnan(M),1,'first');
                    fprintf(fide,'%i & %i & %i & %.3d & %.3d & %.3d & %.3d & %.3d & %.3d\\\\ \n',...
                        cellidx,...
                        Z,...
                        mtsz{j,1},...
                        nanmean(abs(V-M)./M),...
                        nansum(V(idxx:end).*M(idxx:end))/sqrt(nansum(V(idxx:end).^2))/sqrt(nansum(M(idxx:end).^2)),...
                        nansum(log10(V(idxx:end)).*log10(M(idxx:end)))/ (sqrt(nansum(log10(V(idxx:end)).^2))*sqrt(nansum(log10(M(idxx:end)).^2))),...
                        VRR{j},...
                        MRR{j},...
                        abs(VRR{j}-MRR{j})/MRR{j}...
                        );
            end
            if L.z(L.ZAID(Z)).isFissionable
                printxsn('parts', ['sandboxxscell' num2str(cellidx) 'z' num2str(Z)],...
                    0,0,0,[1e-8 1e4],'', {...
                    'MCNPX (n,t)',...
                    'MCNPX (n,e)',...
                    'MCNPX (n,$\gamma$)',...
                    'MCNPX (n,f)',...
                    'VBUDSII (n,t)',...
                    'VBUDSII (n,e)',...
                    'VBUDSII (n,$\gamma$)',...
                    'VBUDSII (n,f)'...
                    }, '', L.groupDef, VXS, L.groupDef, MXS);
                    %'MCNPX (n,i)',...
                    %'VBUDSII (n,i)',...
            else

                printxsn('parts', ['sandboxxscell' num2str(cellidx) 'z' num2str(Z)],...
                    0,0,0,[1e-8 1e4],'', {...
                    'MCNPX (n,t)',...
                    'MCNPX (n,e)',...
                    'MCNPX (n,$\gamma$)',...
                    'VBUDSII (n,t)',...
                    'VBUDSII (n,e)',...
                    'VBUDSII (n,$\gamma$)',...
                    }, '', L.groupDef, VXS, L.groupDef, MXS);
                    %'MCNPX (n,i)',...
                    %'VBUDSII (n,i)',...

            end


        end
    end

    % ERROR TABLE
    fprintf(fide,'}\n');
    fprintf(fide,'\\end{document}\n');
    fclose(fide);

    system('rubber --pdf sandboxerrortable.tex');

    % ASSEMBLE PDF DOCUMENT
   fid = fopen('sandboxreport.tex','w');
   fprintf(fid,'\\documentclass[letterpaper,12pt]{article}\n');
   fprintf(fid,'\\usepackage{graphicx}\n');
   fprintf(fid,'\\usepackage[left=.5in,right=.5in,top=1in,bottom=1in]{geometry}\n');
   fprintf(fid,'\\usepackage{caption}\n');
   fprintf(fid,'\\newcommand{\\fitzefigtwo}[2]{\\begin{center}\\includegraphics{#1}\\captionof{figure}{#2}\\label{fig:#2}\\end{center}}\n');
   fprintf(fid,'\\begin{document}\n');
   fprintf(fid,'\\title{Sandbox Results}\n');
   fprintf(fid,'\\date{\\today}\n');
   fprintf(fid,'\\maketitle\n');


   fprintf(fid,'\\section{The only Flux plot(s)}\n');
   fprintf(fid,['\\fitzefigtwo{parts/sandboxflux' num2str(p.resolveXS) '}{Energy dependent flux in both cells of the reactor, generated by MCNPX and VBUDSII.}\n']);

   if plotVBUDSIflux
   fprintf(fid,['\\fitzefigtwo{parts/sandboxflux' num2str(p.resolveXS) 'vbudsi}{Energy dependent flux in both cells of the reactor, generated by MCNPX, VBUDSII and VBUDSI.}\n']);
   fprintf(fid,['\\fitzefigtwo{parts/sandboxflux' num2str(p.resolveXS) 'vbudsi2}{Energy dependent flux in both cells of the reactor, generated by MCNPX and VBUDSI.}\n']);
   end

    for cellidx = 1:g.regionDef(1).nCells

        fprintf(fid,'\\subsection{Cross sections in cell %s}\n',g.regionDef(1).cellDef(cellidx).name);

        fprintf(fid,['\\fitzefigtwo{parts/sandboxxscell' num2str(cellidx) '}{Energy-dependent cross sections for the %s cell, generated by VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name);

        % ZAID-LEVEL CROSS SECTIONS
        mtsz = {7 '1';
    %           4 '4';
               2 '2';
               102 '102';
               18 '18'};
        for zidx = 1:length(g.regionDef(1).cellDef(cellidx).initZAIDs)
            Z = g.regionDef(1).cellDef(cellidx).initZAIDs(zidx);

            fprintf(fid,'\\subsubsection{Cross sections in cell %s, for ZAID %i}\n',g.regionDef(1).cellDef(cellidx).name, Z);

            fprintf(fid,['\\fitzefigtwo{parts/sandboxxscell' ...
                num2str(cellidx) 'z' num2str(Z) '}{Energy-dependent cross sections in the %s cell for ZAID %i, generated by both MCNPX and VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name,Z);

            fprintf(fid,'\\subsubsection{Cross sections in cell %s, for ZAID %i, separated by reaction type}\n',g.regionDef(1).cellDef(cellidx).name, Z);

            if L.z(L.ZAID(Z)).isFissionable
                for j = 1:4
                    fprintf(fid,['\\fitzefigtwo{parts/sandboxxscell' ...
                        num2str(cellidx) 'z' num2str(Z) 'm' mtsz{j,2} '}{Energy-dependent cross sections in the %s cell for ZAID %i and MT %i, generated by both MCNPX and VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name,Z,mtsz{j,1});
                end
            else
                for j = 1:3
                    fprintf(fid,['\\fitzefigtwo{parts/sandboxxscell' ...
                        num2str(cellidx) 'z' num2str(Z) 'm' mtsz{j,2} '}{Energy-dependent cross sections in the %s cell for ZAID %i and MT %i, generated by both MCNPX and VBUDSII.}\n'],g.regionDef(1).cellDef(cellidx).name,Z,mtsz{j,1});
                end
            end

        end
    end
   fprintf(fid,['\n\nMT 7: total \n\n'...
                'MT 4: inelastic scattering \n\n'...
                'MT 2: elastic scattering \n\n'...
                'MT 102: radiative capture \n\n'...
                'MT 18: fission\n\n'...
                'XS error 1: \\verb|nanmean(abs(V-M)./M)|\n\n'...
                'XS error 2: \\verb|V''*M/norm(V)/norm(M)|\n\n'...
                'XS error 3: \\verb|log10(V)''*log10(M)/norm(log10(V))/norm(log10(M))|\n\n']);
   fprintf(fid,'\\includegraphics{sandboxerrortable.pdf}\n');
   fprintf(fid,'\\end{document}\n');
   fclose(fid);
    system(sprintf('rubber --pdf sandboxreport.tex'));


end




%  o0 = sparse(1,1);
%  p.ZAIDs = [8016 11023 92235 92238];
%  o0(p.ZAIDs) = [14 24 14 14];
%  o02 = sparse(1,1);
%  o02(p.ZAIDs) = [103 201 101 102];
%i %= i + 1;
%      A = L.z(L.ZAID(z)).m(L.MT(1)).xs(:,L.T(myT(i)),L.S0(10));
%      B = L.z(L.ZAID(z)).m(L.MT(4)).xs(:,L.T(myT(i)),L.S0(10));
%      C = sum(L.z(L.ZAID(z)).m(L.MT(2)).xs(:,:,L.T(myT(i)),L.S0(10)))';
%      D = L.z(L.ZAID(z)).m(L.MT(18)).xs(:,L.T(myT(i)),L.S0(10));
%      E = L.z(L.ZAID(z)).m(L.MT(102)).xs(:,L.T(myT(i)),L.S0(10));
%      W = TallyP(tallystring(o0(z),o02(z),1));
%      X = TallyP(tallystring(o0(z),o02(z),2));
%      Y = TallyP(tallystring(o0(z),o02(z),18));
%      Z = TallyP(tallystring(o0(z),o02(z),102));
%      if z == 8016 || z == 11023
%          printxsn([figdir 'xsplot/'],...
%              ['xs' num2str(z) 'many'],0,0,0,[1e-8 1e4],'',...
%              {'MCNPX (n,t)','MCNPX (n,$\gamma$)','MCNPX (n,e)','(n,t)','(n,$\gamma$)','(n,e)','(n,i)'},'',...
%              L.groupDef,{A,E,C,B},L.groupDef,{W,Z,X});
%      else
%          printxsn([figdir 'xsplot/'],...
%              ['xs' num2str(z) 'many'],0,0,0,[1e-8 1e4],'',...
%              {'MCNPX (n,t)','MCNPX (n,$\gamma$)','MCNPX (n,f)','MCNPX (n,e)','(n,t)','(n,$\gamma$)','(n,f)','(n,e)','(n,i)'},'',...
%              L.groupDef,{A,E,D,C,B},L.groupDef,{W,Z,Y,X});
%      end


%  mts = {7 1;
%         2 2;
%         102 4;
%         9 5};
