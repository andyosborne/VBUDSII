classdef VbudsiiVsVbudsii < handle
    properties
        fdir;
        fname;
        figdir;
        param1;
        param2;
        geom1;
        geom2;
        Lib1;
        Lib2;
        R1;
        R2;
        descript1;
        descript2;
        fid;
        doerror;
        plotMTs;
        mcnpxflux;
        ylog = true;
        lgd = {'(n,t)', ...
               '(n,s)', ...
               '(n,tr)', ...
               '(n,$\nu$f)'};
        lgd1 = {'sim 1 (n,t)', ...
               '(n,s)', ...
               'sim 1 (n,tr)', ...
               'sim 1 (n,$\nu$f)'};
        lgd2 = {'sim 2 (n,t)', ...
               '(n,s)', ...
               'sim 2 (n,tr)', ...
               'sim 2 (n,$\nu$f)'};
        %lgd = {'(n,t)', ...
        %       '(n,e)', ...
        %       '(n,i)', ... 
        %       '(n,t)', ...
        %       '(n,tr)', ...
        %       '(n,$\nu$f)', ...
        %       '(n,f)', ...
        %       '(n,$\gamma$)', ...
        %       '$\bar{\mu}$', ...
        %       '$\nu$'};
        %lgd1 = {'sim 1 (n,t)', ...
        %       'sim 1 (n,e)', ...
        %       'sim 1 (n,i)', ... 
        %       'sim 1 (n,t)', ...
        %       'sim 1 (n,tr)', ...
        %       'sim 1 (n,$\nu$f)', ...
        %       'sim 1 (n,f)', ...
        %       'sim 1 (n,$\gamma$)', ...
        %       'sim 1 $\bar{\mu}$', ...
        %       'sim 1 $\nu$'};
        %lgd2 = {'sim 2 (n,t)', ...
        %       'sim 2 (n,e)', ...
        %       'sim 2 (n,i)', ... 
        %       'sim 2 (n,t)', ...
        %       'sim 2 (n,tr)', ...
        %       'sim 2 (n,$\nu$f)', ...
        %       'sim 2 (n,f)', ...
        %       'sim 2 (n,$\gamma$)', ...
        %       'sim 2 $\bar{\mu}$', ...
        %       'sim 2 $\nu$'};
        %'MCNPX (n,i)',...
        MTstr = {...
            'total', ...
            'elastic scattering', ...
            'radiative capture', ...
            'fission', ...
        };
            %'total scattering', ...
            %'\nu-fission', ...
        ZAIDmap = containers.Map({222, 1001, 8016, 92235, 92238}, ...
            {'water', 'hydrogen-1', 'oxygen-16', 'uranium-235', 'uranium-238'});
    end
    methods
        function self = VbudsiiVsVbudsii(fdir, fname, ...
                vbudsiiRuns, ...
                tag1, tag2, ...
                varargin)
                %param1, param2, ...
                %geom1, geom2, ...
                %Lib1, Lib2, ...
                %Results1, Results2, ...
                %descript1, descript2, ...
            self.fdir = fdir;
            self.fname = fname;
            self.fid = 0;
            self.param1 = vbudsiiRuns.params(tag1);
            self.param2 = vbudsiiRuns.params(tag2);
            self.geom1 = vbudsiiRuns.geoms(tag1);
            self.geom2 = vbudsiiRuns.geoms(tag2);
            self.Lib1 = vbudsiiRuns.Libs(tag1);
            self.Lib2 = vbudsiiRuns.Libs(tag2);
            self.R1 = vbudsiiRuns.Results(tag1);
            self.R2 = vbudsiiRuns.Results(tag2);
            self.descript1 = vbudsiiRuns.captions(tag1);
            self.descript2 = vbudsiiRuns.captions(tag2);
            self.plotMTs = [7 2 8 9];
            if length(varargin) == 1
                self.mcnpxflux = varargin{1};
                %self.doerror = varargin{1};
            else
                self.mcnpxflux = [];
                %self.doerror = false;
            end
            self.OpenFile();
            self.PrintPreamble();
            self.PrintParamAndGeom();
            self.PrintFlux();
            self.PrintPI();
            self.PrintLibraryCrossSections();
            self.PrintCrossSections();
            self.PrintEnd();
            self.Typeset();
        end
        function OpenFile(self)
            if ~isempty(self.fdir) && ~strcmp(self.fdir(end), filesep)
                self.fdir = [self.fdir filesep];
            end
            self.figdir = [self.fdir 'figs/'];
            
            if ~isempty(self.fdir) && ~exist(self.fdir, 'dir')
                system(['mkdir ' self.fdir]);
            end
            
            if ~exist(self.figdir, 'dir')
                system(['mkdir ' self.figdir]);
            end
            self.fid = fopen([self.fdir self.fname '.tex'], 'w');
        end
        function PrintPreamble(self)
            self.out('\\documentclass[letterpaper,12pt]{article}\n');
            self.out('\\usepackage{graphicx}\n');
            self.out(['\\usepackage[left=.5in,right=.5in,top=1in,'...
                'bottom=1in]{geometry}\n']);
            self.out('\\usepackage{caption}\n');
            self.out('\\newcommand{\\fitzefigtwo}[2]{\n');
            self.out('\\begin{center}\\includegraphics{#1}\n');
            self.out('\\captionof{figure}{#2}\\label{fig:#2}\\end{center}}\n');
            self.out(['\\usepackage[pdfborder={0 0 0},colorlinks={true}'...
                ',citecolor=red,linkbordercolor={0 0 0},linkcolor=blue]'...
                '{hyperref}\n']);
            self.out('\\begin{document}\n');
            self.out('\\title{Comparison between VBUDSII and MCNPX}\n');
            self.out('\\date{\\today}\n');
            self.out('\\maketitle\n');
            self.out('\\newpage\n');
            self.out('\\listoffigures\n');
        end
        function PrintEnd(self)
            self.out('\\end{document}\n');
            fclose(self.fid);
        end
        function Typeset(self)
            system(sprintf('rubber --pdf %s.tex', [self.fdir self.fname]));
            delete('*.aux');
            delete('*.log');
        end
        function Subsection(self, string)
            self.out(sprintf('%ssubsection{%s}\n', '\\', string));
        end
        function Section(self, string)
            self.out(sprintf('%ssection{%s}\n', '\\', string));
        end
        function PrintParamAndGeom(self)
            self.Section('Simulation 1');
            self.out(self.descript1);
            self.Section('Simulation 2');
            self.out(self.descript2);
            %self.Section('Param structures');

            %self.Section('Geometry structures');
        end
        function PrintPI(self)
            self.Section('PI');
            regDef = self.geom1.regionDef(1);
            pi1 = [squeeze(self.R1.Region(1).PI(2,1,:)) ...
                squeeze(self.R1.Region(1).PI(1,2,:))];
            pi2 = [squeeze(self.R2.Region(1).PI(2,1,:)) ...
                squeeze(self.R2.Region(1).PI(1,2,:))];
            seriesv1 = [regDef.cellDef(1).name 'to' ...
                regDef.cellDef(2).name];
            seriesv2 = [regDef.cellDef(2).name 'to' ...
                regDef.cellDef(1).name];
            printnuclearplot('pi', 'pi', {...
                ['sim 2 ' seriesv1], ...
                ['sim 2 ' seriesv2], ...
                ['sim 1 ' seriesv1], ...
                ['sim 1 ' seriesv2]}, ...
                self.Lib2.groupDef, ...
                {pi2(:,1), pi2(:,2)}, ...
                'groupdefs2', ...
                self.Lib1.groupDef, ...
                'xss2', ...
                {pi1(:,1), pi1(:,2)}, ...
                'fdir', self.figdir);
            self.Fitzefig([self.figdir 'pi'], ...
                ['PI in both the fuel and coolant ' ...
                    'between VBUDSII simulations 1 and 2']);
        end
        function PrintFlux(self)
            self.Section('Flux');
            regDef = self.geom1.regionDef(1);
            flux1 = [self.R1.Region(1).Cell(1).spectralFlux ...
               self.R1.Region(1).Cell(2).spectralFlux];
            flux2 = [self.R2.Region(1).Cell(1).spectralFlux ...
               self.R2.Region(1).Cell(2).spectralFlux];
            seriesv1 = regDef.cellDef(1).name;
            seriesv2 = regDef.cellDef(2).name;
            
            if isempty(self.mcnpxflux)
                printnuclearplot('flux', 'flux', {...
                    ['sim 2 ' seriesv1], ...
                    ['sim 2 ' seriesv2], ...
                    ['sim 1 ' seriesv1], ...
                    ['sim 1 ' seriesv2]}, ...
                    self.Lib2.groupDef, ...
                    {flux2(:,1), flux2(:,2)}, ...
                    'groupdefs2', ...
                    self.Lib1.groupDef, ...
                    'xss2', ...
                    {flux1(:,1), flux1(:,2)}, ...
                    'fdir', self.figdir);
                self.Fitzefig([self.figdir 'flux'], ...
                    ['Spectral flux in both the fuel and coolant ' ...
                        'between VBUDSII simulations 1 and 2']);
            else
                self.mcnpxflux = self.mcnpxflux * sum(sum(self.mcnpxflux)) / ...
                    sum(sum(flux1));
                printnuclearplot('flux', 'flux', {...
                    ['VBUDSII 2 ' seriesv1], ...
                    ['VBUDSII 2 ' seriesv2], ...
                    ['VBUDSII 1 ' seriesv1], ...
                    ['VBUDSII 1 ' seriesv2], ...
                    ['MCNPX ' seriesv1], ...
                    ['MCNPX ' seriesv2]}, ...
                    self.Lib2.groupDef, ...
                    {flux2(:,1), flux2(:,2)}, ...
                    'groupdefs2', ...
                    self.Lib1.groupDef, ...
                    'xss2', ...
                    {flux1(:,1), flux1(:,2), ...
                    self.mcnpxflux(:,1), self.mcnpxflux(:,2)}, ...
                    'fdir', self.figdir);
                self.Fitzefig([self.figdir 'flux'], ...
                    ['Spectral flux in both the fuel and coolant ' ...
                        'for VBUDSII simulations 1 and 2, and MCNPX.']);
            end
            if self.doerror
                printnuclearplot('fluxerror', 'errorflux', ...
                    {seriesv1, seriesv2}, ...
                    self.Lib1.groupDef, ...
                    {flux1(:,1)-flux2(:,1),...
                    flux1(:,2)-flux2(:,2)}, ...
                    'fdir', self.figdir, 'ylog', false);
                self.Fitzefig([self.figdir 'fluxerror'], ...
                    ['Spectral flux error in both the fuel and coolant ' ...
                    'between VBUDSII simulations 1 and 2']);
            end
        end
        function PrintLibraryCrossSections(self)
        end
        function PrintCrossSections(self)
            Lib = self.Lib1;
            nMTs = length(self.plotMTs);
            
            Reg1 = self.R1.Region(1);
            Reg2 = self.R2.Region(1);
            regDef = self.geom1.regionDef(1);
            
            for iCell = 1:regDef.nCells
                self.Section(sprintf('Cross sections for the %s cell.', ...
                    regDef.cellDef(iCell).name));
                % cell-level cross section.
                xs1 = cell(1, nMTs);
                xs2 = cell(1, nMTs);
                for iMT = 1:nMTs
                    MT = self.plotMTs(iMT);
                    if MT == 2 % scattering kernel
                        xs1{iMT} = ...
                            sum(Reg1.Cell(iCell).fine(Lib.MT(MT)).value)';
                        xs2{iMT} = ...
                            sum(Reg2.Cell(iCell).fine(Lib.MT(MT)).value)';
                    else
                        xs1{iMT} = Reg1.Cell(iCell).fine(Lib.MT(MT)).value;
                        xs2{iMT} = Reg2.Cell(iCell).fine(Lib.MT(MT)).value;
                    end
                    self.AddCellMTXS(regDef.cellDef(iCell).name, ...
                        iMT, xs1{iMT}, xs2{iMT});
                end
                figure;
                subplot(1,2,1);
                surf(Reg1.Cell(iCell).fine(Lib.MT(2)).value, ...
                    'EdgeColor', 'none');
                view(0, 90); axis ij square tight;
                xlabel(sprintf('sim 1 cell %s', ...
                    regDef.cellDef(iCell).name));
                subplot(1,2,2);
                surf(Reg2.Cell(iCell).fine(Lib.MT(2)).value, ...
                    'EdgeColor', 'none');
                view(0, 90); axis ij square tight;
                xlabel(sprintf('sim 2 cell %s', ...
                    regDef.cellDef(iCell).name));

                %self.AddCellXS(regDef.cellDef(iCell).name, xs1, xs2);
                clear xs1 xs2;
                
                % zaid-level cross section.
%                for iZAID = 1:length(regDef.cellDef(iCell).initZAIDs)
%                    ZAID = regDef.cellDef(iCell).initZAIDs(iZAID);
%                    if ZAID == 222
%                    else
%                        self.Subsection(...
%                            sprintf('Cross sections for the nuclide %s', ...
%                        self.ZAIDmap(ZAID)));
%                        xsz1 = cell(1, nMTs);
%                        xsz2 = cell(1, nMTs);
%                        xsz1Slow = cell(1, nMTs);
%                        xsz1Shigh = cell(1, nMTs);
%                        for iMT = 1:nMTs
%                            MT = self.plotMTs(iMT);
%                            if MT == 2 % scattering kernel
%                            xsz1{iMT} = ...
%sum(Reg1.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).s)';
%                            xsz2{iMT} = ...
%sum(Reg2.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).s)';
%                            xsz1Slow{iMT} = ...
%sum(Reg1.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).t(:,:,1))';
%                            xsz1Shigh{iMT} = ...
%sum(Reg1.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).t(:,:,end))';
%                            else
%                            xsz1{iMT} = ...
%Reg1.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).s;
%                            xsz2{iMT} = ...
%Reg2.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).s;
%                            xsz1Slow{iMT} = ...
%Reg1.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).t(:,1);
%                            xsz1Shigh{iMT} = ...
%Reg1.Cell(iCell).fine(Lib.MT(MT)).z(iZAID).t(:,end);
%                            end
%                            % Create per-MT plots.
%                            %self.AddMTXS(regDef.cellDef(iCell).name, ...
%                            %    regDef.cellDef(iCell).initZAIDs(iZAID), iMT, ...
%                            %    xsz1{iMT}, xsz2{iMT}, ...
%                            %    xsz1Slow{iMT}, xsz1Shigh{iMT}, ...
%                            %    mean(Reg1.Cell(iCell).S0s(:,iZAID)));
%                        end
%                        
%                    %self.AddZAIDXS(regDef.cellDef(iCell).name, ...
%                    %    regDef.cellDef(iCell).initZAIDs(iZAID), ...
%                    %    xsz1, xsz2, ...
%                    %    mean(Reg1.Cell(iCell).S0s(:,iZAID)));
%                    clear xsz1 xsz2 xsz1Slow xsz1Shigh;
%                    end
%                end
            end
        end
        function AddCellMTXS(self, cellname, iMT, xsz1, xsz2)
            fname = sprintf('xs%sm%i', cellname, iMT);
            printnuclearplot(fname, 'macro', ...
                {...
                ['sim 2 ' self.lgd{iMT}], ...
                ['sim 1 ' self.lgd{iMT}], ...
                }, ...
                self.Lib2.groupDef, ...
                {xsz2}, ...
                'groupdefs2', ...
                self.Lib1.groupDef, ...
                'xss2', ...
                {xsz1}, ...
                'ylog', self.ylog, ...
                'fdir', self.figdir);
            self.Fitzefig([self.figdir fname], ...
                sprintf(['Energy-dependent macroscopic %s cross section ' ...
                    'in the %s cell, logarithmic scale.'], ...
                    self.Lib1.MTmap(self.plotMTs(iMT)), ...
                    cellname));
            printnuclearplot([fname 'nolog'], 'macro', ...
                {...
                ['sim 2 ' self.lgd{iMT}], ...
                ['sim 1 ' self.lgd{iMT}], ...
                }, ...
                self.Lib2.groupDef, ...
                {xsz2}, ...
                'groupdefs2', ...
                self.Lib1.groupDef, ...
                'xss2', ...
                {xsz1}, ...
                'ylog', ~self.ylog, ...
                'fdir', self.figdir);
            self.Fitzefig([self.figdir fname 'nolog'], ...
                sprintf(['Energy-dependent macroscopic %s cross section ' ...
                    'in the %s cell, linear scale.'], ...
                    self.Lib1.MTmap(self.plotMTs(iMT)), ...
                    cellname));
            if self.doerror
                printnuclearplot([fname 'error'], 'errormacro', ...
                    {'error'}, ...
                    self.Lib1.groupDef, ...
                    {xsz1-xsz2}, ...
                    'fdir', self.figdir, 'ylog', true);
                self.Fitzefig([self.figdir fname 'error'], ...
                sprintf(['Error in energy-dependent microscopic %s ' ...
                    'cross section ' ...
                    'in the %s cell.'], ...
                    self.Lib1.MTmap(self.plotMTs(iMT)), ...
                    cellname));
            end
        end
        function AddMTXS(self, cellname, ZAID, iMT, xsz1, xsz2, ...
                xsz1Slow, xsz1Shigh, avgS0)
            fname = sprintf('xs%sz%im%i', cellname, ZAID, iMT);
            printnuclearplot(fname, 'micro', ...
                {['sim 1 ' self.lgd{iMT}], ...
                [self.lgd{iMT} ' S0 = -1'], [self.lgd{iMT} ' S0 = 10'],...
                ['sim 2 ' self.lgd{iMT}], ...
                }, ...
                self.Lib1.groupDef, ...
                {xsz1, xsz1Slow, xsz1Shigh}, ...
                'groupdefs2', ...
                self.Lib2.groupDef, ...
                'xss2', ...
                {xsz2}, ...
                'ylog', self.ylog, ...
                'fdir', self.figdir, ...
                'xbelow',sprintf('mean S0: %f', avgS0));
            self.Fitzefig([self.figdir fname], ...
                sprintf(['Energy-dependent microscopic %s cross section ' ...
                    'for nuclide %s in the %s cell.'], ...
                    self.Lib1.MTmap(self.plotMTs(iMT)), ...
                    self.ZAIDmap(ZAID), cellname));
            if self.doerror
                printnuclearplot([fname 'error'], 'errormicro', ...
                    {'error'}, ...
                    self.Lib1.groupDef, ...
                    {xsz1-xsz2}, ...
                    'fdir', self.figdir, 'ylog', true);
                self.Fitzefig([self.figdir fname 'error'], ...
                sprintf(['Error in energy-dependent microscopic %s ' ...
                    'cross section ' ...
                    'for nuclide %s in the %s cell.'], ...
                    self.Lib1.MTmap(self.plotMTs(iMT)), ...
                    self.ZAIDmap(ZAID), cellname));
            end
        end
        function AddCellXS(self, cellname, xs1, xs2)
            fname = sprintf('xs%s', cellname);
            printnuclearplot(fname, ...
                'macro', [self.lgd1, self.lgd2], ...
                self.Lib1.groupDef, ...
                xs1, ...
                'groupdefs2', self.Lib2.groupDef, ...
                'xss2', xs2, 'ylog', self.ylog, ...
                'fdir', self.figdir);
            self.Fitzefig([self.figdir fname], ...
                sprintf(['Energy-dependent macroscopic cell-level ' ...
                    'cross sections for the ' ...
                    '%s cell.'], cellname));
        end
        function AddZAIDXS(self, cellname, ZAID, xsz1, xsz2, avgS0)
            fname = sprintf('xs%sz%i', cellname, ZAID);
            printnuclearplot(fname, ...
                'micro', [self.lgd1, self.lgd2], ...
                self.Lib1.groupDef, ...
                xsz1, ...
                'groupdefs2', self.Lib2.groupDef, ...
                'xss2', xsz2, 'ylog', self.ylog, ...
                'fdir', self.figdir, ...
                'xbelow',sprintf('mean S0: %f', avgS0));
            self.Fitzefig([self.figdir fname], ...
                sprintf(['Microscopic cross sections for nuclide %s in ' ...
                    'the %s cell.'], self.ZAIDmap(ZAID), cellname));
        end
        function Fitzefig(self, filename, caption)
            self.out(sprintf('%sfitzefigtwo{%s}{%s}\n\n', '\\', ...
                filename, caption));
        end
        function out(self, string)
            fprintf(self.fid, string);
        end
    end
end
