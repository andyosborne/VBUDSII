function vbudsiireportcompare(dir4report, ...
    reportname, ...
    Tally1, ...
    TallyP, ...
    mcnpxPowerDensity, ...
    vbudsiflux, ...
    p, ...
    g, ...
    L, ...
    r, ...
    p2, ...
    g2, ...
    L2, ...
    r2, ...
    varargin)

doPDFXS = 1;

if length(varargin) == 2
    astring = varargin{1};
    bstring = varargin{2};
else
    astring = 'No description provided.'
    bstring = 'No description provided.'
end

if ~isempty(dir4report) && ~strcmp(dir4report(end), filesep)
    dir4report = [dir4report filesep];
end
figdir = [dir4report 'figs/'];

if ~exist(dir4report, 'dir')
    system(['mkdir ' dir4report]);
end

if ~exist(figdir, 'dir')
    system(['mkdir ' figdir]);
end

%% FLUX NORMALIZATION
% a
vbudsiiPowerDensity = r.Cell(1).powerDensity;
vbudsiiflux = [r.Cell(1).spectralFlux r.Cell(2).spectralFlux];
% vbudsiiFluxIntegral = ...
%     sum(diff(L.groupDef').*sum([r.Cell(1).spectralFlux  ...
%                 r.Cell(2).spectralFlux], 2));
vbudsiiflux = vbudsiiflux/vbudsiiPowerDensity;

% b
vbudsii2PowerDensity = r2.Cell(1).powerDensity;
vbudsii2flux = [r2.Cell(1).spectralFlux r2.Cell(2).spectralFlux];
% vbudsii2FluxIntegral = ...
%     sum(diff(L2.groupDef').*sum([r2.Cell(1).spectralFlux  ...
%                 r2.Cell(2).spectralFlux], 2));
vbudsii2flux = vbudsii2flux/vbudsii2PowerDensity;

mcnpflux = [Tally1{1}.value{1}(1:end-1) Tally1{2}.value{1}(1:end-1)];

mcnpxFluxIntegral = sum(diff(L.groupDef').*sum(mcnpflux, 2));

%mcnpxflux = mcnpflux*max(max(vbudsiiflux))/max(max(mcnpflux));
mcnpxflux = mcnpflux/mcnpxPowerDensity;
%mcnpxflux = mcnpflux/mcnpxFluxIntegral;

vbudsiFluxIntegral = sum(diff(L.groupDef').*sum(vbudsiflux,2));

vbudsiflux(:,1) = vbudsiflux(:,1)*sum(sum(vbudsiiflux))/sum(sum(vbudsiflux));
vbudsiflux(:,2) = vbudsiflux(:,2)*sum(sum(vbudsiiflux))/sum(sum(vbudsiflux));
%vbudsiflux = vbudsiflux/vbudsiFluxIntegral;

%% PLOTS PLOTS PLOTS PLOTS
% SO-VARYING CROSS SECTIONS if doPlot
for regidx = 1:g.nRegions
    printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS)],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSII-a coolant',...
        'VBUDSII-a fuel'...
        },'', L.groupDef,{...
        vbudsiiflux(:,1),...
        vbudsiiflux(:,2),...
        }, L.groupDef,{...
        mcnpxflux(:,1),...
        mcnpxflux(:,2)...
        });
    printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS) 'b'],0,0,2,[],'', {...
        'MCNPX coolant',...
        'MCNPX fuel',...
        'VBUDSII-b coolant',...
        'VBUDSII-b fuel'...
        },'', L.groupDef,{...
        vbudsii2flux(:,1),...
        vbudsii2flux(:,2),...
        }, L.groupDef,{...
        mcnpxflux(:,1),...
        mcnpxflux(:,2)...
        });
    printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS) 'ab'],0,0,2,[],'', {...
        'VBUDSII-a coolant',...
        'VBUDSII-a fuel'...
        'VBUDSII-b coolant',...
        'VBUDSII-b fuel'...
        },'', L.groupDef,{...
        vbudsii2flux(:,1),...
        vbudsii2flux(:,2),...
        }, L.groupDef,{...
        vbudsiiflux(:,1),...
        vbudsiiflux(:,2),...
        });
    if ~isempty(vbudsiflux)
        printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS) 'vbudsi'],0,0,2,[],'', {...
            'MCNPX coolant',...
            'MCNPX fuel',...
            'VBUDSII-a coolant',...
            'VBUDSII-a fuel',...
            'VBUDSI coolant',...
            'VBUDSI fuel'...
            },'', L.groupDef,{...
            vbudsiiflux(:,1),...
            vbudsiiflux(:,2),...
            vbudsiflux(:,1),...
            vbudsiflux(:,2),...
            }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
            });
        printplotxsn(figdir,[reportname 'flux' num2str(p.resolveXS) 'vbudsi2'],0,0,2,[],'', {...
            'MCNPX coolant',...
            'MCNPX fuel',...
            'VBUDSI coolant',...
            'VBUDSI fuel'...
            },'', L.groupDef,{...
            vbudsiflux(:,1),...
            vbudsiflux(:,2),...
            }, L.groupDef,{...
            mcnpxflux(:,1),...
            mcnpxflux(:,2)...
            });

    end
end

% ASSEMBLE PDF DOCUMENT
fid = fopen([reportname '.tex'],'w');
fprintf(fid,'\\documentclass[letterpaper,12pt]{article}\n');
fprintf(fid,'\\usepackage{graphicx}\n');
fprintf(fid,'\\usepackage[left=.5in,right=.5in,top=1in,bottom=1in]{geometry}\n');
fprintf(fid,'\\usepackage{caption}\n');
fprintf(fid,'\\newcommand{\\fitzefigtwo}[2]{\\begin{center}\\includegraphics{#1}\\captionof{figure}{#2}\\label{fig:#2}\\end{center}}\n');
fprintf(fid,'\\begin{document}\n');
fprintf(fid,'\\title{Results}\n');
fprintf(fid,'\\date{\\today}\n');
fprintf(fid,'\\maketitle\n');
fprintf(fid,'\\tableofcontents\n');

% Describe the two runs.
if ~isempty(varargin)
    fprintf(fid, '\\section{Description of run a}\n%s', astring);
    fprintf(fid, '\\section{Description of run b}\n%s', bstring);
end

fprintf(fid,'\\section{The only Flux plot(s)}\n');
fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) ...
    '}{Energy dependent flux in both cells of the reactor, ' ...
    'generated by MCNPX and VBUDSII run a.}\n']);

fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) ...
    'b}{Energy dependent flux in both cells of the reactor, ' ...
    'generated by MCNPX and VBUDSII run b.}\n']);

fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) ...
    'ab}{Energy dependent flux in both cells of the reactor, ' ...
    'generated by VBUDSII run a and VBUDSII run b.}\n']);
if ~isempty(vbudsiflux) % plotVBUDSIflux
    fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) ...
        'vbudsi}{Energy dependent flux in both cells of the reactor, ' ...
        'generated by MCNPX, VBUDSII and VBUDSI.}\n']);
    fprintf(fid,['\\fitzefigtwo{figs/' reportname 'flux' num2str(p.resolveXS) ...
        'vbudsi2}{Energy dependent flux in both cells of the reactor, ' ...
        'generated by MCNPX and VBUDSI.}\n']);
end


if doPDFXS
    lgdzM = {...
        'MCNPX (n,t)',...
        'MCNPX (n,e)',...
        'MCNPX (n,$\gamma$)',...
        'MCNPX (n,f)',...
        'MCNPX (n,$\nu$f)'};
    %'MCNPX (n,i)',...
    lgdzV = {...
        'VBUDSII-a (n,t)',...
        'VBUDSII-a (n,e)',...
        'VBUDSII-a (n,$\gamma$)',...
        'VBUDSII-a (n,f)', ...
        'VBUDSII-a (n,$\nu$f)'};
    %'VBUDSII-a (n,i)',...
    lgdzV2 = {...
        'VBUDSII-b (n,t)',...
        'VBUDSII-b (n,e)',...
        'VBUDSII-b (n,$\gamma$)',...
        'VBUDSII-b (n,f)', ...
        'VBUDSII-b (n,$\nu$f)'};
    %'VBUDSII-b (n,i)',...
    mtsz = {7 '1' 'total';
            %           4 '4';
            2 '2' 'scatter';
            102 '102' 'capture';
            18 '18' 'fission';
            9 '-6.-7' 'nufission'};

    % CELL-LEVEL CROSS SECTIONS
    cs = {1 '24.200';
          2 '14.100'};
    for cellidx = 1:g.regionDef(1).nCells
        r.Cell(cellidx).fine(L.MT(2)).value = ...
            sum(r.Cell(cellidx).fine(L.MT(2)).value)';
        r2.Cell(cellidx).fine(L.MT(2)).value = ...
            sum(r2.Cell(cellidx).fine(L.MT(2)).value)';
        VXS = cell(1, 3 + 2*g.regionDef(1).cellDef(cellidx).isFissionable);
        V2XS = cell(1, 3 + 2*g2.regionDef(1).cellDef(cellidx).isFissionable);
        MXS = cell(1, 3 + 2*g.regionDef(1).cellDef(cellidx).isFissionable);
        for iMT = 1:3 + 2*g.regionDef(1).cellDef(cellidx).isFissionable
            VXS{iMT} = r.Cell(cellidx).fine(L.MT(mtsz{iMT,1})).value;
            V2XS{iMT} = r2.Cell(cellidx).fine(L.MT(mtsz{iMT,1})).value;
            MXS{iMT} = TallyP(tallystring(cs{cellidx,2},mtsz{iMT,2}));
            printxsn(figdir, [reportname 'xscell' num2str(cellidx) ...
                'm' num2str(mtsz{iMT,1})],...
                0,0,0,[1e-8 1e4],'', {...
                lgdzM{iMT}, lgdzV{iMT}, lgdzV2{iMT}...
                }, ...
                '', ...
                L.groupDef, {MXS{iMT}, VXS{iMT}, V2XS{iMT}});
        end

        % ZAID-LEVEL CROSS SECTIONS
        csz = {'14' 100;
               '24' 200};
        for zidx = 1:length(g.regionDef(1).cellDef(cellidx).initZAIDs)
            Z = g.regionDef(1).cellDef(cellidx).initZAIDs(zidx);
            if Z ~= 222
                r.Cell(cellidx).fine(L.MT(2)).z(zidx).s = ...
                    sum(r.Cell(cellidx).fine(L.MT(2)).z(zidx).s)';
                r2.Cell(cellidx).fine(L.MT(2)).z(zidx).s = ...
                    sum(r2.Cell(cellidx).fine(L.MT(2)).z(zidx).s)';
                VXS = cell(1, 3 + 2*L.z(L.ZAID(Z)).isFissionable);
                MXS = cell(1, 3 + 2*L.z(L.ZAID(Z)).isFissionable);
                for iMT = 1:3 + 2*L.z(L.ZAID(Z)).isFissionable
                    VXS{iMT} = r.Cell(cellidx).fine(L.MT(mtsz{iMT,1})).z(zidx).s;
                    V2XS{iMT} = r2.Cell(cellidx).fine(L.MT(mtsz{iMT,1})).z(zidx).s;
                    MXS{iMT} = TallyP(tallystring(csz{cellidx,1},...
                        csz{cellidx,2}+zidx,...
                        mtsz{iMT,2} ...
                        ));
                    printxsn(figdir, [reportname 'xscell' num2str(cellidx) ...
                        'z' num2str(Z) 'm' num2str(mtsz{iMT,1})],...
                        0,0,0,[1e-8 1e4],'', {...
                        lgdzM{iMT}, lgdzV{iMT}, lgdzV2{iMT}...
                        }, ...
                        '', ...
                        L.groupDef, {MXS{iMT}, VXS{iMT}, V2XS{iMT}});
                end
            end
        end
    end

    % CELL-LEVEL CROSS SECTIONS
    for cellidx = 1:g.regionDef(1).nCells
        fprintf(fid,'\\section{Cross sections in cell %s}\n', ...
            g.regionDef(1).cellDef(cellidx).name);
        for iMT = 1:3 + 2*L.z(L.ZAID(Z)).isFissionable
            fprintf(fid, ['\\fitzefigtwo{figs/' reportname 'xscell' ...
                num2str(cellidx) 'm' num2str(mtsz{iMT,1}) ...
                '}{Energy-dependent %s cross section for the %s cell, ' ...
                'generated by MCNPX and VBUDSII run a and run b.}\n'], ...
                mtsz{iMT,3}, g.regionDef(1).cellDef(cellidx).name);
        end

        % ZAID-LEVEL CROSS SECTIONS
        for zidx = 1:length(g.regionDef(1).cellDef(cellidx).initZAIDs)
            Z = g.regionDef(1).cellDef(cellidx).initZAIDs(zidx);
            if Z ~= 222
                fprintf(fid,['\\subsection{Cross sections in cell %s, ' ...
                    'for ZAID %i}\n'],g.regionDef(1).cellDef(cellidx).name, Z);
                for iMT = 1:3 + 2*L.z(L.ZAID(Z)).isFissionable
                        fprintf(fid,['\\fitzefigtwo{figs/' reportname 'xscell' ...
                            num2str(cellidx) 'z' num2str(Z) 'm' ...
                            num2str(mtsz{iMT,1}) ...
                            '}{Energy-dependent %s cross section in the %s cell ' ...
                            'for ZAID %i, generated by both MCNPX '...
                            'and VBUDSII.}\n'], ...
                            mtsz{iMT,3},g.regionDef(1).cellDef(cellidx).name,Z);
                end
            end
        end
    end
end

fprintf(fid,'\\end{document}\n');
fclose(fid);
system(sprintf('rubber --into=%s --pdf %s.tex',dir4report, reportname));


%global Tally1, ...
%       TallyP, ...
%       mcnpxPowerDensity, ...
%       vbudsiflux, ...
%       p, ...
%       g, ...
%       L, ...
%       r, ...
%       p2, ...
%       g2, ...
%       L2, ...
%       r2
