clear all;

runMCNPX = 0;
doPlot = 1;
doPDFXS = 1;


mycd = cd;
cd(fullfile('..','..','..',''));
vbudsiiDir = cd;
cd(mycd); % alternatively, mfilename

%% PL PL PL PL PL PL PL PL
pL = struct('metamat','FarmXSMeta',...
                'address','/home/fitze/Dropbox/UTA/r/code/vbudsii/data/XSFarm',...
               'verbose',1,...
               'explore',1,...
                  'mine',1,...
                 'plant',1,...
             'fertilize',1,...
               'harvest',1,...
                     'e',struct('searchWeb',1),...
                     'm',struct('downloadTape20s',1),...
                     'p',struct('MFMTs',[3 1;
                                         3 4;
                                         6 2;
                                         3 18;
                                         3 102;
                                         3 251;
                                         3 452],...
                                 'Ts',[300 600 900 1200 1500],...
                                'S0s',10.^([10 5 3 2 1 0 -1]),...
                             'IGNstr','1',...
                           'groupDef',10.^(-4:.1:7),...
                             'IWTstr','3'),...
                     'f',struct('overwriteOutput',1,...
                                     'logResults',0),...
                     'h',struct('makeLibrary',1,...
                                 'makeArrays',0),...
                 'ZAIDs',[1001 8016 11023 92235 92238]);


%% DEFINE PARAMETER STRUCTURE P P P P P P P
fineGroupDef = 10.^(-4:.1:7);
fewGroupDef = [1e-4 1 100e3 1e7];
p = struct('nFineGroups',length(fineGroupDef)-1,... % leave blank.
           'nFewGroups',length(fewGroupDef)-1,...
           'fineGroupDef',fineGroupDef,...
           'fewGroupDef',fewGroupDef,...
           'powerDensity',50,... % MW/m^3
           'nTimeSteps',1,...
           'vbudsiiDir',vbudsiiDir,...
           'makeLibrary',1,...
           'makeLibraryTempFlag',pL,... %3,...
           'XSLibraryMAT',fullfile('..','..','data','XSLibrary.mat'),...
           'verbose',1,...
           'resolveXS',1,...
           'immutableMyMTs',1,...
           'makeRealNuFission',1,...
           'S0iterthresh',.00001,...
           'doPlot',0); % this largely affects the validation effort.

% Determining pin diameter.
uc.pinPitch = 2; % [2,2];

fuelVolFraction = 0.37;
uc.pinDiam = sqrt(uc.pinPitch^2 * fuelVolFraction * 4 / pi);

uc.f = 1; % some weighting of the fuel regions
uc.g = 1; % some weighting of the moderator regions
uc.sauerConst.mod = 2.35;
uc.sauerConst.fuel = 5.00;

p.uc = uc;

%% DEFINE GEOMETRY STRUCTURE
% initialize
g = struct('nRegions',          [],...
           'regionDef',         struct('name','',...
                                       'nCells',    [],...
                                       'relVolumes',[],...
                                       'isFissionable',[],...
                                       'cellDef',struct('name','',...
                                                'isFissionable',[],...
                                                'initZAIDs',[],...
                                                'initNumDensities',[],...
                                                'initDensity',[],...
                                                'initSpectralFlux',[],...
                                                'initTemp',[]...
                                                        )));
%% G G G G G G G G G G G G
enrichment = .256;
density_Na = 0.882; % g/cm^3
density_UO2 = 11; %g/cm^3
[ao, wo, N_Na] = matl([11023 1], 1, density_Na);
[ao, wo, N_UO2] = matl([92235 enrichment;
                        92238 1-enrichment;
                        8016 2], 1, density_UO2);

% define
% one region with two cells: UO2 and H2O
g.nRegions = 1;
g.regionDef(1).name = 'campaign1';
g.regionDef(1).nCells = 2;
g.regionDef(1).relVolumes = [uc.pinPitch^2-pi/4*uc.pinDiam^2, pi/4*uc.pinDiam^2];
% H2O cell
g.regionDef(1).cellDef(1).name = 'Na';
g.regionDef(1).cellDef(1).initZAIDs = [11023];
g.regionDef(1).cellDef(1).initNumDensities = [N_Na];
g.regionDef(1).cellDef(1).initDensity = density_Na;
g.regionDef(1).cellDef(1).initSpectralFlux = ones(1,p.nFineGroups);
g.regionDef(1).cellDef(1).initTemp = 300 + 273;
% UO2 cell
g.regionDef(1).cellDef(2).name = 'UO2';
g.regionDef(1).cellDef(2).initZAIDs = [92235 92238 8016];
g.regionDef(1).cellDef(2).initNumDensities = N_UO2';
g.regionDef(1).cellDef(2).initDensity = density_UO2;
g.regionDef(1).cellDef(2).initSpectralFlux = ones(1,p.nFineGroups);
g.regionDef(1).cellDef(2).initTemp = 900 + 273;

%% RUN MCNPX
addpath(cd(fullfile('..','mcnpx')));

ifname = 'verifymcnpxfast2';
mcnpxexecpath = fullfile('..','mcnpx','fast2');

if runMCNPX
    % ~exist([mcnpxexecpath filesep 'outp'], 'file')
    writeMCNPXSpectralInput(p, g, mcnpxexecpath, ifname);
    cd(mcnpxexecpath);
    system(['mcnpx i= ' ifname]);
    system('rm runtpe');
end

    cd(mycd);
[Tally1 TallyP] = TallyPull2([mcnpxexecpath filesep 'outp']);
save XSTallyfast Tally1 TallyP

%% RUN VBUDSII
%cd(fullfile('..','..',''));
%addpath(fullfile('..','..',''));
addpath(p.vbudsiiDir);

tallyxs = Tally1;
%p.useMCNPXTallyXS = tallyxs;


[Results, p , g, L] = main(p,g);

r = Results.Region(1);

%% SCALE FLUX
vbudsiiPower = r.Cell(2).powerDensity;

load verifyvbudsifast_111128.mat;
vbudsflux = VBUDS_flux(end:-2:2,[1 2]);
vbudsflux = vbudsflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(vbudsflux));

mcnpflux = [Tally1{2}.value{1}(1:end-1) Tally1{1}.value{1}(1:end-1)];
mcnpxflux = mcnpflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(mcnpflux));

mcnpxPower = TallyP('14.100.-6.-8');
mcnpxPower = mcnpxPower(end);

%% PLOTS PLOTS PLOTS PLOTS

if doPlot
figdir = '/home/fitze/Dropbox/UTA/c/deinert/proj/doc/figs/';
    for regidx = 1:g.nRegions
        for cellidx = 1:g.regionDef(regidx).nCells
        plotxsn(0,2,...
        [g.regionDef(regidx).name ': '...
        g.regionDef(regidx).cellDef(cellidx).name],...
        {['vbudsii. k_{\infty} = ' num2str(r.kInf)],...
         ['vbudsi, k_{\infty} = '  num2str(six_factors(7))],...
          'mcnpx. k_{eff} = 1.56'},...
        '',...
            p.fineGroupDef,...
            Results.Region(regidx).Cell(cellidx).spectralFlux,...
            vbudsflux(:,cellidx),...
            mcnpxflux(:,cellidx));
        end
        %printxsn([figdir 'xsplot/'],...
        %     ['verifyallfast1flux' num2str(p.resolveXS)],0,0,2,[],'',...
        %     {'MCNPX coolant','MCNPX fuel','VBUDSII coolant','VBUDSII fuel'},'',...
        %     L.groupDef,{Results.Region(regidx).Cell(1).spectralFlux,Results.Region(regidx).Cell(2).spectralFlux},L.groupDef,{mcnpxflux(:,1),mcnpxflux(:,2)});
    end
end

% INFINITE DILUTION CROSS SECTIONS
if 0
    p.resolveXS = ~p.resolveXS;
    [Resultsz, pz , gz, Lz] = main(p, g);
    r = Resultsz.Region(1);
    mcnpxflux = mcnpflux*max(max([r.Cell(1).spectralFlux
        r.Cell(2).spectralFlux]))/max(max(mcnpflux));
    for regidx = 1:g.nRegions
        printxsn('',['sandboxflux' num2str(p.resolveXS)],0,0,2,[1e-6 1e1],'',...
            {'MCNPX coolant',...
            'MCNPX fuel',...
            'VBUDSII coolant',...
            'VBUDSII fuel',...
            'VBUDSII coolant, i.d.',...
            'VBUDSII fuel, i.d.'},'',...
            L.groupDef,{...
            Results.Region(regidx).Cell(1).spectralFlux,...
            Results.Region(regidx).Cell(2).spectralFlux,...
            Resultsz.Region(regidx).Cell(1).spectralFlux,...
            Resultsz.Region(regidx).Cell(2).spectralFlux,...
            },L.groupDef,{mcnpxflux(:,1),mcnpxflux(:,2)});
    end
end

if doPDFXS

    MKEYS = keys(TallyP);
    for i = 1:length(MKEYS)
        if strcmp(MKEYS{i}(1:2), '14') && ~strcmp(MKEYS{i}, '14.0.0')
            TallyP(MKEYS{i}) = TallyP(MKEYS{i})./TallyP('14.0.0');
            aaa = TallyP(MKEYS{i});
            TallyP(MKEYS{i}) = aaa(1:end-1);
        elseif strcmp(MKEYS{i}(1:2), '24') && ~strcmp(MKEYS{i}, '24.0.0')
            TallyP(MKEYS{i}) = TallyP(MKEYS{i})./TallyP('24.0.0');
            aaa = TallyP(MKEYS{i});
            TallyP(MKEYS{i}) = aaa(1:end-1);
        end
    end

    % CELL-LEVEL CROSS SECTIONS
    %
    cs = {1 '24.200';
          2 '14.100'};

    mts = {7 '1';
           2 '2';
           102 '102';
           9 '-6.-7'};

    for cellidx = 1:g.regionDef(1).nCells

        r.Cell(cellidx).fine(L.MT(2)).value = ...
            sum(r.Cell(cellidx).fine(L.MT(2)).value)';


        if g.regionDef(1).cellDef(cellidx).isFissionable

            VXS = cell(1,4);
            MXS = cell(1, 4);

            for j = 1:4

                VXS{j} = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;
                MXS{j} = TallyP(tallystring(cs{cellidx,2},mts{j,2}));

            end
            printxsn('', ['sandboxxscell' num2str(cellidx)],...
                0,0,0,[1e-8 1e4],'', {...
                'MCNPX (n,t)',...
                'MCNPX (n,e)',...
                'MCNPX (n,$\gamma$)',...
                'MCNPX (n,$\nu$f)',...
                'VBUDSII (n,t)',...
                'VBUDSII (n,s)',...
                'VBUDSII (n,$\gamma$)',...
                'VBUDSII (n,$\nu$f)'...
                }, '', L.groupDef, VXS, L.groupDef, MXS);
        else

            VXS = cell(1,3);
            MXS = cell(1,3);

            for j = 1:3

                VXS{j} = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;
                MXS{j} = TallyP(tallystring(cs{cellidx,2},mts{j,2}));
            end
            printxsn('', ['sandboxxscell' num2str(cellidx)],...
                0,0,0,[1e-8 1e4],'', {...
                'MCNPX (n,t)',...
                'MCNPX (n,e)',...
                'MCNPX (n,$\gamma$)',...
                'VBUDSII (n,t)',...
                'VBUDSII (n,s)',...
                'VBUDSII (n,$\gamma$)',...
                }, '', L.groupDef, VXS, L.groupDef, MXS);

        end

        % ZAID-LEVEL CROSS SECTIONS
        csz = {'24' 200;
              '14' 100};
        mtsz = {7 '1';
               4 '4';
               2 '2';
               102 '102';
               18 '18'};
        lgdzM = {...
             'MCNPX (n,t)',...
             'MCNPX (n,i)',...
             'MCNPX (n,e)',...
             'MCNPX (n,$\gamma$)',...
             'MCNPX (n,f)'};
        lgdzV = {...
             'VBUDSII (n,t)',...
             'VBUDSII (n,i)',...
             'VBUDSII (n,e)',...
             'VBUDSII (n,$\gamma$)',...
             'VBUDSII (n,f)'};
        for zidx = 1:length(g.regionDef(1).cellDef(cellidx).initZAIDs)
            Z = g.regionDef(1).cellDef(cellidx).initZAIDs(zidx);

            r.Cell(cellidx).fine(L.MT(2)).z(zidx).s = ...
                sum(r.Cell(cellidx).fine(L.MT(2)).z(zidx).s)';

            if L.z(L.ZAID(Z)).isFissionable

                VXS = cell(1,5);
                MXS = cell(1, 5);
                for j = 1:5

                    VXS{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).s;
                    MXS{j} = TallyP(tallystring(csz{cellidx,1},...
                                                csz{cellidx,2}+zidx,...
                                                mtsz{j,2}));

                    printxsn('', ['sandboxxscell' num2str(cellidx) ...
                            'z' num2str(Z) 'm' mtsz{j,2}],...
                        0,0,0,[1e-8 1e4],'', {...
                        lgdzM{j}, lgdzV{j}...
                        }, '', L.groupDef, {VXS{j}}, L.groupDef, {MXS{j}});

                end

                printxsn('', ['sandboxxscell' num2str(cellidx) 'z' num2str(Z)],...
                    0,0,0,[1e-8 1e4],'', {...
                    'MCNPX (n,t)',...
                    'MCNPX (n,i)',...
                    'MCNPX (n,e)',...
                    'MCNPX (n,$\gamma$)',...
                    'MCNPX (n,f)',...
                    'VBUDSII (n,t)',...
                    'VBUDSII (n,i)',...
                    'VBUDSII (n,e)',...
                    'VBUDSII (n,$\gamma$)',...
                    'VBUDSII (n,f)'...
                    }, '', L.groupDef, VXS, L.groupDef, MXS);
            else

                VXS = cell(1,4);
                MXS = cell(1,4);

                for j = 1:4
                    VXS{j} = r.Cell(cellidx).fine(L.MT(mtsz{j,1})).z(zidx).s;

                    MXS{j} = TallyP(tallystring(csz{cellidx,1},...
                                                csz{cellidx,2}+zidx,...
                                                mtsz{j,2}));

                    printxsn('', ['sandboxxscell' num2str(cellidx) ...
                            'z' num2str(Z) 'm' mtsz{j,2}],...
                        0,0,0,[1e-8 1e4],'', {...
                        lgdzM{j}, lgdzV{j}...
                        }, '', L.groupDef, {VXS{j}}, L.groupDef, {MXS{j}});

                end
                printxsn('', ['sandboxxscell' num2str(cellidx) 'z' num2str(Z)],...
                    0,0,0,[1e-8 1e4],'', {...
                    'MCNPX (n,t)',...
                    'MCNPX (n,i)',...
                    'MCNPX (n,e)',...
                    'MCNPX (n,$\gamma$)',...
                    'VBUDSII (n,t)',...
                    'VBUDSII (n,i)',...
                    'VBUDSII (n,e)',...
                    'VBUDSII (n,$\gamma$)',...
                    }, '', L.groupDef, VXS, L.groupDef, MXS);

            end


        end
    end




    % ASSEMBLE PDF DOCUMENT
end
break;
if 0
    p.resolveXS = ~p.resolveXS;
    [Resultsz, pz , gz, Lz] = main(p, g);
    r = Resultsz.Region(1);
    mcnpxflux = mcnpflux*max(max([r.Cell(1).spectralFlux
        r.Cell(2).spectralFlux]))/max(max(mcnpflux));
    for regidx = 1:g.nRegions
        printxsn([figdir 'xsplot/'],...
             ['verifyallfast1fluxcompare'],0,0,2,[1e-6 1e1],'',...
             {'MCNPX coolant','MCNPX fuel','VBUDSII coolant, i.d.','VBUDSII fuel, i.d.','VBUDSII coolant','VBUDSII fuel'},'',...
             L.groupDef,{...
            Results.Region(regidx).Cell(1).spectralFlux,...
            Results.Region(regidx).Cell(2).spectralFlux,...
            Resultsz.Region(regidx).Cell(1).spectralFlux,...
            Resultsz.Region(regidx).Cell(2).spectralFlux,...
            },L.groupDef,{mcnpxflux(:,1),mcnpxflux(:,2)});
    end
end


if doPlot

    mts = {7 1;
           2 2;
           102 4;
           9 5};
%    fprintf(fid,'FM34 -1 100 (1) (2) (18) (102) (-6 -7)\n');
    for cellidx = 1:g.regionDef(1).nCells
        r.Cell(cellidx).fine(L.MT(2)).value = ...
        sum(r.Cell(cellidx).fine(L.MT(2)).value)';
        hf = figure;
        for j = 1:4
            ha = subplot(2,2,j);
            if (j == 4) && ~g.regionDef(1).cellDef(cellidx).isFissionable
            else
                A = r.Cell(cellidx).fine(L.MT(mts{j,1})).value;
                B = tallyxs{5-cellidx}.value{mts{j,2}}(1:end-1)./...
                    tallyxs{3-cellidx}.value{1}(1:end-1);
            plotxsn2(hf,ha,0,1,['Cell ' g.regionDef(1).cellDef(cellidx).name ...
            ' MT ' num2str(mts{j,1})],{'vbudsii','mcnpx'},...
            num2str(sum(abs(A-B)./B)),...
            p.fineGroupDef,...
            A,...
            B);
            end
        end
    end
end

%{
vbudsiiPower = sum(200* r.Cell(2).fine(L.MT(18)).value .* ...
r.Cell(2).spectralFlux)

%% CHECK RESULTS
doPlot = 0;

Tally1 = TallyPull2('mcnpx/2/outp');
mcnpflux = [Tally1{2}.value{1}(1:end-1) Tally1{1}.value{1}(1:end-1)];
mcnpxflux = mcnpflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(mcnpflux));

mcnpxPower = Tally1{3}.value{1}(end)

load benchmarkvbuds1.mat
vbudsflux = VBUDS_flux(end:-2:2,[1 2]);
vbudsflux = vbudsflux*max(max([r.Cell(1).spectralFlux r.Cell(2).spectralFlux]))/max(max(vbudsflux));


for regidx = 1:g.nRegions
    for cellidx = 1:g.regionDef(regidx).nCells
    plotxsn(0,2,...
    [g.regionDef(regidx).name ': '...
    g.regionDef(regidx).cellDef(cellidx).name],...
    {['vbudsii. k_{\infty} = ' num2str(r.kInf)],...
     ['vbudsi, k_{\infty} = '  num2str(six_factors(7))],...
        'mcnp5. k_{eff} = 1.44','mcnpx. k_{eff} = 1.44'},...
    '',...
        p.fineGroupDef,...
        Results.Region(regidx).Cell(cellidx).spectralFlux,...
        vbudsflux(:,cellidx),...
        mcnp5flux(:,cellidx),...
        mcnpxflux(:,cellidx));
    end
end

%{
if sum(r.Cell(1).spectralFlux ~= mcnpflux(:,1)) || ...
    sum(r.Cell(2).spectralFlux ~= mcnpflux(:,2))
    disp('benchmarkmcnpx flux test FAILED');
    figure;
    subplot(1,2,1);
    loglog(p.fineGroupDef(1:end-1)'*[1 1],[r.Cell(1).spectralFlux ...
        mcnpflux(:,1)])
    title('H2O')
    ylabel('\phi (# n cm^{-2} s^{-1})')
    xlabel('E (eV)')
    legend('vbudsii','mcnpx','Location','Best')
    subplot(1,2,2);
    loglog(p.fineGroupDef(1:end-1)'*[1 1],[r.Cell(2).spectralFlux ...
        mcnpflux(:,2)])
    title('UO2')
    ylabel('\phi (# n cm^{-2} s^{-1})')
    xlabel('E (eV)')
    legend('vbudsii','mcnpx','Location','Best')
%   [r.Cell(2).spectralFlux./mcnpflux(:,2) r.Cell(2).spectralFlux-mcnpflux(:,2)]
    %print('benchmarkmcnp5_111026.eps','-depsc','-r300');
else
    disp('benchmarkmcnpx flux test passed');
%    [Region(1).Cell(1).spectralFlux == phi(:,1), ...
%    Region(1).Cell(2).spectralFlux == phi(:,2)]
end
%}
%{
plotxsn(1,2,g.regionDef(1).name,...
    {'vbudsi H2O','vbudsi UO2','vbudsii H2O','vbudsii UO2'},'',...
    p.fineGroupDef,...
    vbudsflux(:,2),...
    r.Cell(1).spectralFlux,...
    vbudsflux(:,1),...
    r.Cell(2).spectralFlux);


plotxsn(1,2,g.regionDef(1).name,...
    {'vbudsi H2O','vbudsi UO2','vbudsii H2O','vbudsii UO2'},'',...
    p.fineGroupDef,...
    VBUDS_flux3(:,2),...
    r.Cell(1).spectralFlux,...
    VBUDS_flux3(:,1),...
    r.Cell(2).spectralFlux);
%}
%}
