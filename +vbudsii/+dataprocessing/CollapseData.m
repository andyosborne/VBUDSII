function Ri = CollapseData(L, p, r, Ri)

% goes through all cells in this region and calls CollapseEnergy for both few
% and one group cross sections, also for infinite dilution.

import vbudsii.*
import vbudsii.dataprocessing.*

util.PrintEntering(p, 'CollapseData');

for cellidx = 1:r.nCells
    for m = L.mainMTs
        [Ri.Cell(cellidx).few(L.MT(m)).value ...
            Ri.Cell(cellidx).fewFlux] = ...
            CollapseEnergy(p.fineGroupDef, p.fewGroupDef, ...
            Ri.Cell(cellidx).fine(L.MT(m)).value, ...
            Ri.Cell(cellidx).spectralFlux);
        Ri.Cell(cellidx).one(L.MT(m)).value = ...
            CollapseEnergy(p.fewGroupDef, p.fewGroupDef([1 end]), ...
            Ri.Cell(cellidx).few(L.MT(m)).value, ...
            Ri.Cell(cellidx).fewFlux);
        for zaididx = 1:length(Ri.Cell(cellidx).ZAIDs)
            % t
            for s0idx = 1:length(L.S0s)
                if m == 2 || m == 16 || m == 6
                    Ri.Cell(cellidx).few(L.MT(m)).z(zaididx).t(:,:,s0idx) = ...
                        CollapseEnergy(p.fineGroupDef, p.fewGroupDef, ...
                        Ri.Cell(cellidx).fine(...
                            L.MT(m)).z(zaididx).t(:,:,s0idx), ...
                            Ri.Cell(cellidx).spectralFlux);
                    
                    Ri.Cell(cellidx).one(L.MT(m)).z(zaididx).t(:,:,s0idx) = ...
                        CollapseEnergy(p.fewGroupDef, ...
                            p.fewGroupDef([1 end]), ...
                        Ri.Cell(cellidx).few(...
                            L.MT(m)).z(zaididx).t(:,:,s0idx), ...
                            Ri.Cell(cellidx).fewFlux);
                else
                    Ri.Cell(cellidx).few(L.MT(m)).z(zaididx).t(:,s0idx) = ...
                        CollapseEnergy(p.fineGroupDef, p.fewGroupDef, ...
                        Ri.Cell(cellidx).fine(...
                            L.MT(m)).z(zaididx).t(:,s0idx), ...
                            Ri.Cell(cellidx).spectralFlux);
                    
                    Ri.Cell(cellidx).one(L.MT(m)).z(zaididx).t(:,s0idx) = ...
                        CollapseEnergy(p.fewGroupDef, ...
                            p.fewGroupDef([1 end]), ...
                        Ri.Cell(cellidx).few(...
                            L.MT(m)).z(zaididx).t(:,s0idx), ...
                            Ri.Cell(cellidx).fewFlux);
                end
            end
            % s
            Ri.Cell(cellidx).few(L.MT(m)).z(zaididx).s = ...
                CollapseEnergy(p.fineGroupDef, p.fewGroupDef, ...
                Ri.Cell(cellidx).fine(L.MT(m)).z(zaididx).s, ...
                Ri.Cell(cellidx).spectralFlux);
            
            Ri.Cell(cellidx).one(L.MT(m)).z(zaididx).s = ...
                CollapseEnergy(p.fewGroupDef, p.fewGroupDef([1 end]), ...
                Ri.Cell(cellidx).few(L.MT(m)).z(zaididx).s, ...
                Ri.Cell(cellidx).fewFlux);
            if m == 2 || m == 16 || m == 6
                Ri.Cell(cellidx).one(L.MT(m)).z(zaididx).RR = ...
                    Ri.Cell(cellidx).numDensities(zaididx) *  ...
                    sum(sum(Ri.Cell(cellidx).fine(L.MT(m)).z(zaididx).s)' .* ...
                    Ri.Cell(cellidx).spectralFlux);
                % TODO inefficient.
                [xs flux] = CollapseEnergy(p.fineGroupDef, p.fewGroupDef, ...
                    sum(Ri.Cell(cellidx).fine(L.MT(m)).z(zaididx).s)', ...
                    Ri.Cell(cellidx).spectralFlux);
                Ri.Cell(cellidx).few(L.MT(m)).z(zaididx).RR = ...
                    Ri.Cell(cellidx).numDensities(zaididx) *  ...
                    xs .* flux;
            else
                Ri.Cell(cellidx).one(L.MT(m)).z(zaididx).RR = ...
                    Ri.Cell(cellidx).numDensities(zaididx) *  ...
                    sum(Ri.Cell(cellidx).fine(L.MT(m)).z(zaididx).s .* ...
                    Ri.Cell(cellidx).spectralFlux);
                % TODO inefficient.
                [xs flux] = CollapseEnergy(p.fineGroupDef, p.fewGroupDef, ...
                    Ri.Cell(cellidx).fine(L.MT(m)).z(zaididx).s, ...
                    Ri.Cell(cellidx).spectralFlux);
                Ri.Cell(cellidx).few(L.MT(m)).z(zaididx).RR = ...
                    Ri.Cell(cellidx).numDensities(zaididx) *  ...
                    xs .* flux;
            end
            
        end
    end
end

util.PrintExiting(p, 'CollapseData');
